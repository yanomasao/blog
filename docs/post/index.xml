<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on コードの波にゆ～らゆら</title>
    <link>https://ymraintree.github.io/blog/post/</link>
    <description>Recent content in Posts on コードの波にゆ～らゆら</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 May 2019 09:04:01 +0900</lastBuildDate>
    
	<atom:link href="https://ymraintree.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dockerでsambaサーバ作成</title>
      <link>https://ymraintree.github.io/blog/post/2019/20190509/</link>
      <pubDate>Fri, 10 May 2019 09:04:01 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2019/20190509/</guid>
      <description>&lt;p&gt;vmware上のsambaサーバをDockerコンテナ化。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ラ・フォル・ジュルネ 2019</title>
      <link>https://ymraintree.github.io/blog/post/2019/20190506/</link>
      <pubDate>Mon, 06 May 2019 10:24:20 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2019/20190506/</guid>
      <description>&lt;p&gt;&lt;a target=&#34;_blank&#34;  href=&#34;https://www.amazon.co.jp/gp/product/B07LBKC13R/ref=as_li_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B07LBKC13R&amp;linkCode=as2&amp;tag=ymraintree03-22&amp;linkId=9b410880785a62fe2cdbd8805b8d8bf5&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=JP&amp;ASIN=B07LBKC13R&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=ymraintree03-22&#34; &gt;&lt;/a&gt;&lt;img src=&#34;//ir-jp.amazon-adsystem.com/e/ir?t=ymraintree03-22&amp;l=am2&amp;o=9&amp;a=B07LBKC13R&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;10連休の今年のGW、例年と変わらずなにもせずに終わりつつありますが、唯一のイベントとして、東京国際フォーラムのラ・フォル・ジュルネに行ってきました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Karabiner-Elements</title>
      <link>https://ymraintree.github.io/blog/post/2019/20190420/</link>
      <pubDate>Sun, 21 Apr 2019 01:32:41 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2019/20190420/</guid>
      <description>&lt;p&gt;Macのコマンドキーとコントロールキーを入れ替えるのにkeyhacを使っていたけれど、&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ソフトウェアデザイン 2019年4月号</title>
      <link>https://ymraintree.github.io/blog/post/2019/20190418/</link>
      <pubDate>Thu, 18 Apr 2019 14:53:32 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2019/20190418/</guid>
      <description>&lt;p&gt;もう5月号が出ているけれど、ようやく目を通した。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>スマホでブログを書いてみる</title>
      <link>https://ymraintree.github.io/blog/post/2019/20190404/</link>
      <pubDate>Thu, 04 Apr 2019 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2019/20190404/</guid>
      <description>&lt;p&gt;スマホでブログを書いてみる。&lt;code&gt;hugo new&lt;/code&gt;せずにgithubでcreate new file
するので、&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>『月の満ち欠け』佐藤正午</title>
      <link>https://ymraintree.github.io/blog/post/2019/20190331-3/</link>
      <pubDate>Sun, 31 Mar 2019 12:30:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2019/20190331-3/</guid>
      <description>&lt;p&gt;突然ですが、ここで書籍のおはなし。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>次はカテゴリとかタグかな</title>
      <link>https://ymraintree.github.io/blog/post/2019/20190331-2/</link>
      <pubDate>Sun, 31 Mar 2019 01:40:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2019/20190331-2/</guid>
      <description>TODO: やっぱりカテゴリとかタグとか必要ですよね。</description>
    </item>
    
    <item>
      <title>CircleCI --&gt; Slackへの通知</title>
      <link>https://ymraintree.github.io/blog/post/2019/20190330-3/</link>
      <pubDate>Sun, 31 Mar 2019 00:44:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2019/20190330-3/</guid>
      <description>こちらのページを参考に、サクッとSlack連携。ありがとうございました。</description>
    </item>
    
    <item>
      <title>テスト</title>
      <link>https://ymraintree.github.io/blog/post/2019/20190331/</link>
      <pubDate>Sun, 31 Mar 2019 00:14:13 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2019/20190331/</guid>
      <description>githubで直接書いてもいいのね。プレビューもできるし。</description>
    </item>
    
    <item>
      <title>BOSE SoundSport Free購入</title>
      <link>https://ymraintree.github.io/blog/post/2019/20190330-2/</link>
      <pubDate>Sat, 30 Mar 2019 17:09:13 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2019/20190330-2/</guid>
      <description>いつもBOSEのQuiet Comfort 35 IIを使っているが、Amazonで安かった＆LINE PAYで20％オフということで、SoundSport Freeも購入。自宅で使っている限り、とても快適。これでリモートの打ち合わせももっと楽になるかも。</description>
    </item>
    
    <item>
      <title>CircleCI</title>
      <link>https://ymraintree.github.io/blog/post/2019/20190330/</link>
      <pubDate>Sat, 30 Mar 2019 09:48:11 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2019/20190330/</guid>
      <description>このブログをCircleCIで自動化。しかし、config.ymlを変更したりしてもCircleCIが走ってしまうのはどうすればいいのか。commit -m &#39;[ci skip]&#39;しても走ってしまう。ちょっと気持ち悪い。
そうか、CI/CDされたくなければgithub上で直接編集すればいいのか。ローカルでテストできるものでもないし。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ymraintree.github.io/blog/post/template/</link>
      <pubDate>Sat, 30 Mar 2019 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/template/</guid>
      <description></description>
    </item>
    
    <item>
      <title>github pages&#43;hugoでblog その３ CircleCI</title>
      <link>https://ymraintree.github.io/blog/post/2019/20190329-3/</link>
      <pubDate>Fri, 29 Mar 2019 23:57:35 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2019/20190329-3/</guid>
      <description>&lt;p&gt;ついでなので、CircleCIでビルド＆公開の設定。どうやら、.circleci/config.ymlにgithubに変化があったときに何をするかを定義していくらしい。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>github pages&#43;hugoでblog その２</title>
      <link>https://ymraintree.github.io/blog/post/2019/20190329-2/</link>
      <pubDate>Fri, 29 Mar 2019 10:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2019/20190329-2/</guid>
      <description>&lt;p&gt;前回は公開用とコンテンツ作成用でリポジトリをふたつに分けたが、やっぱりリポジトリはひとつのほうがシンプルでいいので、その方式で再作成。githubのリポジトリはblogとする。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>github pages&#43;hugoでblog</title>
      <link>https://ymraintree.github.io/blog/post/2019/20190329/</link>
      <pubDate>Fri, 29 Mar 2019 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2019/20190329/</guid>
      <description>&lt;p&gt;github.comにリポジトリを作成しておく。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;　　　&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ymraintree.github.io&lt;/td&gt;
&lt;td&gt;公開コンテンツ用&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ymraintree.github.io.hugo&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;hugoでのコンテンツ作成用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ブログ開始</title>
      <link>https://ymraintree.github.io/blog/post/2019/20190328/</link>
      <pubDate>Thu, 28 Mar 2019 13:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2019/20190328/</guid>
      <description>古いブログ(http://d.hatena.ne.jp/ymraintree/)から引っ越しました。</description>
    </item>
    
    <item>
      <title>Mac keyhacでキーバインドの変更</title>
      <link>https://ymraintree.github.io/blog/post/2019/20190111/</link>
      <pubDate>Fri, 11 Jan 2019 17:09:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2019/20190111/</guid>
      <description>MacBookProを使っているが、つくづく、コントロールキーとコマンドキーが統合されていればいいのにと思う。Ctrl-aとCmd-aを使い分けるシーンなんてないし。
しばらく前からKeyHacを使って、アプリケーションごとにコントロールキーとコマンドキーの入れ替えをしているが、ちょっとスマートに書けるようになった。
changeKey(keymap.defineWindowKeymap(app_name=&amp;quot;com.google.Chrome&amp;quot;)) changeKey(keymap.defineWindowKeymap(app_name=&amp;quot;com.apple.Preview&amp;quot;)) def changeKey(keymap): keymap[&amp;quot;Ctrl-a&amp;quot;] = &amp;quot;Cmd-a&amp;quot; keymap[&amp;quot;Ctrl-c&amp;quot;] = &amp;quot;Cmd-c&amp;quot; keymap[&amp;quot;Ctrl-d&amp;quot;] = &amp;quot;Cmd-d&amp;quot;  </description>
    </item>
    
    <item>
      <title>Emacsのansi-term</title>
      <link>https://ymraintree.github.io/blog/post/2018/20180917/</link>
      <pubDate>Mon, 17 Sep 2018 17:09:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2018/20180917/</guid>
      <description>いままで、/etc/passwdなどを編集するときはmacのターミナルを起動してそこでviしていたが、普段使っているemacsでM-x ansi-termすると、この中でviを使うことができる。これでターミナル不要になった。ありがたい。</description>
    </item>
    
    <item>
      <title>起業</title>
      <link>https://ymraintree.github.io/blog/post/2018/20180816/</link>
      <pubDate>Thu, 16 Aug 2018 17:09:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2018/20180816/</guid>
      <description>7月末に無事、起業。時間はあったのに、あまり準備をせず、そろそろしなきゃとなったら結果、開業freeeのいうがまま。それでもさっくり起業できた。これから銀行の法人口座を作る。楽天銀行かジャパンネットバンクかという感じだけど、楽天のほうが必要書類が少なくてよさそう。</description>
    </item>
    
    <item>
      <title>Datastoreをcsvでエクスポート</title>
      <link>https://ymraintree.github.io/blog/post/2018/20180512/</link>
      <pubDate>Sat, 12 May 2018 17:09:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2018/20180512/</guid>
      <description>Google App Engineでよく使うDatastoreのデータをディープラーニングで使うためにcsvにしようとした。簡単なことと思ったら以外になかなかできず、結局以下の方法で実現できた。
Datastoreのバックアップ BigQueryにインポート 必要なカラムをselectして、Download as csvをクリック
RDBならcopyコマンドとかで一発なんだけど。簡単なことなんだけど。</description>
    </item>
    
    <item>
      <title>Pythonの日時表示</title>
      <link>https://ymraintree.github.io/blog/post/2018/20180305/</link>
      <pubDate>Mon, 05 Mar 2018 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2018/20180305/</guid>
      <description>日本の日時を表示するには、
import time import os os.environ[&#39;TZ&#39;] = &#39;Japan&#39; time.tzset() time.strftime(&#39;%Y/%m/%d %H:%M:%S %Z&#39;)  とすると 2018/03/05 17:24:54 JST となる。もうちょっといい方法はないかな。</description>
    </item>
    
    <item>
      <title>AWS linuxのディスクを拡張する</title>
      <link>https://ymraintree.github.io/blog/post/2018/20180118/</link>
      <pubDate>Thu, 18 Jan 2018 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2018/20180118/</guid>
      <description>AWSコンソールで当該EBSのサイズを拡張する。 ボリュームの状態が、しばらくすると「in-use - completed (100%)」となる。
$ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 10G 0 disk └─xvda1 202:1 0 8G 0 part / $ df -h /dev/xvda1 7.8G 7.6G 0 100% /  変わっていない。
$ sudo growpart /dev/xvda 1 CHANGED: partition=1 start=16065 old: size=16761118 end=16777183 new: size=20955422,end=20971487 $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 10G 0 disk └─xvda1 202:1 0 10G 0 part / $ sudo resize2fs /dev/xvda1 resize2fs 1.</description>
    </item>
    
    <item>
      <title>国民年金・失業保険</title>
      <link>https://ymraintree.github.io/blog/post/2018/20180115/</link>
      <pubDate>Mon, 15 Jan 2018 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2018/20180115/</guid>
      <description>思うところあって、2017年末に25年以上勤めた会社を早期退職した。これからどうするかなど、たいしたプランもないなかで、とりあえず必要なことをしていく。
まずは、厚生年金を国民年金にスイッチ。このまま受給日まで国民年金で行った場合、厚生年金と合わせた受給額はいくらになるのかなどは、年金事務所に問い合わせろとのこと。市役所は手続きのみらしい。
つづいてハローワークで失業保険受給の手続き。職業安定所といったら、昔は仕事にあぶれたおじさんたちが肩寄せあってタバコを吸いながらしみったれた話しをしているところ、というイメージだったけど、今はすっかりクリーンになっていて、通っても気持ちが暗くなるということもなさそうで安心した。今の労働市場はどうなっているのか、考えてもいなかったような仕事や環境に出会えるのではないかと、期待も芽生えてきた。
これからどうなっていくのか、随時メモをつけていきたい。あいまにPythonやkotlinの勉強をしようと思う。</description>
    </item>
    
    <item>
      <title>My First Lambda</title>
      <link>https://ymraintree.github.io/blog/post/2017/20171008/</link>
      <pubDate>Sun, 08 Oct 2017 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2017/20171008/</guid>
      <description>def checkio(data): return filter(lambda x: 1 &amp;lt; data.count(x), data) if __name__ == &amp;quot;__main__&amp;quot;: #These &amp;quot;asserts&amp;quot; using only for self-checking and not necessary for auto-testing assert list(checkio([1, 2, 3, 1, 3])) == [1, 3, 1, 3], &amp;quot;1st example&amp;quot; assert list(checkio([1, 2, 3, 4, 5])) == [], &amp;quot;2nd example&amp;quot; assert list(checkio([5, 5, 5, 5, 5])) == [5, 5, 5, 5, 5], &amp;quot;3rd example&amp;quot; assert list(checkio([10, 9, 10, 10, 9, 8])) == [10, 9, 10, 10, 9], &amp;quot;4th example&amp;quot;  </description>
    </item>
    
    <item>
      <title>psqlのデリミタを変更する</title>
      <link>https://ymraintree.github.io/blog/post/2017/20170424/</link>
      <pubDate>Mon, 24 Apr 2017 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2017/20170424/</guid>
      <description>$ psql -A -F $&#39;\t&#39; xxxxxx  で出力のデリミタをタブに変更できる。</description>
    </item>
    
    <item>
      <title>EC2 インスタンスのタイムゾーンを変更する</title>
      <link>https://ymraintree.github.io/blog/post/2017/20170214/</link>
      <pubDate>Tue, 14 Feb 2017 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2017/20170214/</guid>
      <description>EC2のLinuxインスタンスは作りたてだとタイムゾーンがJSTではないので、これを変更
$ sudo mv localtime localtime.20170204 $ sudo ln -s /usr/share/zoneinfo/Asia/Tokyo localtime $ date Sat Feb 4 14:48:14 JST 2017 $  </description>
    </item>
    
    <item>
      <title>クローンしたVMのファイル名を変更する</title>
      <link>https://ymraintree.github.io/blog/post/2017/20170116/</link>
      <pubDate>Mon, 16 Jan 2017 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2017/20170116/</guid>
      <description>vmwareのVMをクローンすると、.vmdkファイルの名称が変更されてしまう。たとえば、backupVMというVMをクローンすると、
# ls backupVM_2-ctk.vmdk backupVM.nvram backupVM.vmsd backupVM.vmxf backupVM_2-flat.vmdk backupVM_2.vmdk backupVM.vmx vmware.log #  となる。これはスクリプトなどで.vmdkファイルを操作するのに都合が悪いので、元のbackupVM.vmdkのように直したい。これをmvなどしてしまうと構成が壊れて動かなくなるようなので、
# vmkfstools -E backupVM_2.vmdk backupVM.vmdk  とすると、すべての_2が取れる。
# ls backupVM-ctk.vmdk backupVM.nvram backupVM.vmsd backupVM.vmxf backupVM-flat.vmdk backupVM.vmdk backupVM.vmx vmware.log #  さらに、backupVM.vmxの内容にbackupVM_2が残っているので、これを修正する必要がある。</description>
    </item>
    
    <item>
      <title>keyhac</title>
      <link>https://ymraintree.github.io/blog/post/2016/20161222/</link>
      <pubDate>Thu, 22 Dec 2016 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2016/20161222/</guid>
      <description>Macをsierraにアップグレードしたらkarabinerが使えなくなったので、かわりにkeyhacを試してみる。
keyhacはkarabinerとちがって、コントロールキーとコマンドキーを交換という定義ができず、常に
keymap[&amp;quot;Ctrl-a&amp;quot;] = &amp;quot;Cmd-a&amp;quot;  というふうにメインキーとの組み合わせで定義しなければならないもよう。これは非常の多くの組み合わせがあり、かつ複数のアプリケーションで定義したいので、いちいち全部をconfig.pyに書くのはつらい。そこでメソッド化。
def changeKey(keymap): keymap[&amp;quot;Ctrl-a&amp;quot;] = &amp;quot;Cmd-a&amp;quot; keymap[&amp;quot;Ctrl-c&amp;quot;] = &amp;quot;Cmd-c&amp;quot; keymap[&amp;quot;Ctrl-d&amp;quot;] = &amp;quot;Cmd-d&amp;quot; keymap[&amp;quot;Ctrl-f&amp;quot;] = &amp;quot;Cmd-f&amp;quot; keymap[&amp;quot;Ctrl-p&amp;quot;] = &amp;quot;Cmd-p&amp;quot; keymap[&amp;quot;Ctrl-q&amp;quot;] = &amp;quot;Cmd-q&amp;quot; keymap[&amp;quot;Ctrl-r&amp;quot;] = &amp;quot;Cmd-r&amp;quot; keymap[&amp;quot;Ctrl-s&amp;quot;] = &amp;quot;Cmd-s&amp;quot; keymap[&amp;quot;Ctrl-t&amp;quot;] = &amp;quot;Cmd-t&amp;quot; keymap[&amp;quot;Ctrl-v&amp;quot;] = &amp;quot;Cmd-v&amp;quot; keymap[&amp;quot;Ctrl-w&amp;quot;] = &amp;quot;Cmd-w&amp;quot; keymap[&amp;quot;Ctrl-x&amp;quot;] = &amp;quot;Cmd-x&amp;quot; keymap[&amp;quot;Ctrl-z&amp;quot;] = &amp;quot;Cmd-z&amp;quot; return keymap  を作り、
 keymap_chrome = keymap.defineWindowKeymap(app_name=&amp;quot;com.google.Chrome&amp;quot;) keymap_chrome = changeKey(keymap_chrome)  で呼び出すようにする。</description>
    </item>
    
    <item>
      <title>sshセッションのタイムアウトを防止する</title>
      <link>https://ymraintree.github.io/blog/post/2016/20161216/</link>
      <pubDate>Fri, 16 Dec 2016 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2016/20161216/</guid>
      <description>最近AWSを使うことが多くなって、EC2のインスタンスにsshで接続して作業するが、なにかというとタイムアウトするので不便。ちょっと調べたら
サーバの/etc/ssh/sshd_configに
ClientAliveInterval 60  を設定する
~/.ssh/configに
ServerAliveInterval 60  を設定する
のいずれかでタイムアウトしなくなるらしい。</description>
    </item>
    
    <item>
      <title>EntityManager#createNativeQueryで一部のデータを取り出すとき</title>
      <link>https://ymraintree.github.io/blog/post/2016/20160204/</link>
      <pubDate>Thu, 04 Feb 2016 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2016/20160204/</guid>
      <description>EJBのEntityManagerでテーブルをselectしてそのテーブルのエンティティを返すのは普通にやることだが、group byしてキーだけ取り出したい、などのときは以下のようにObjectの配列のリストとして扱う。
 val keys = em.createNativeQuery(&amp;quot;select t1.key1, t1.key2, t1.key3 &amp;quot; + &amp;quot;from T1 t1 &amp;quot; + &amp;quot;group by t1.key1, t1.key2, t1.key3 &amp;quot; + .getResultList().asInstanceOf[java.util.List[Array[Object] var result = List[fooPK]() keys.foreach(k =&amp;gt; result :+= new fooPK(k(0).toString, k(1).toString.toInt, k(2).toString.toInt))  </description>
    </item>
    
    <item>
      <title>pythonで正規表現を使った結果の判定</title>
      <link>https://ymraintree.github.io/blog/post/2015/20151019/</link>
      <pubDate>Mon, 19 Oct 2015 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2015/20151019/</guid>
      <description>pythonで文字列に数字が含まれているかどうかを判定したいとき、
import re def hantei(v): return re.search(\d, v)  とすると、re.search()がBooleanではなく、re.MatchObjectを返すので使えない。こういうときは、
 return re.search(\d, v) is not None  とするとすっきり。</description>
    </item>
    
    <item>
      <title>オブジェクトの値をコピーする</title>
      <link>https://ymraintree.github.io/blog/post/2015/20150709/</link>
      <pubDate>Thu, 09 Jul 2015 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2015/20150709/</guid>
      <description>case class Foo(key:Int, key2:String, key3:Int)  のクラスからオブジェクトを生成し、それを他のオブジェクトにコピーしたいとき、scalaではcopyメソッドが使える。
val foo = Foo(100, &amp;quot;test&amp;quot;, 200) val zoo = foo.copy(key = 300)  とすると、keyは300がセットされ、他の値は元のオブジェクトからコピーされる。ただし、この機能はcaseクラスのみで、コピーされる対象は()内のプロパティのみ。
case class Foo(key:Int) { var v1:String =_ var v2:Int = _ }  だと、v1, v2はコピーされない。
となると、caseクラスのプロパティはすべて()内に書いちゃうほうがいいのかな。キーになる項目だけ（equalsで比較の対象となるべきものだけ）を定義するものだと思っていたんだけど。</description>
    </item>
    
    <item>
      <title>scalaでxmlのCDATAを扱う</title>
      <link>https://ymraintree.github.io/blog/post/2015/20150521/</link>
      <pubDate>Thu, 21 May 2015 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2015/20150521/</guid>
      <description>普通に
val naiyo = あいうえお x &amp;lt; y var nodes = Queue.empty[Node] nodes :+= &amp;lt;foo&amp;gt;{naiyo}&amp;lt;/foo&amp;gt;  みたいなことを書くと、
x &amp;lt; y  に変換されてしまう。これをしないように、CDATAを使うには
&amp;lt;foo&amp;gt;{scala.xml.PCData(naiyo)}&amp;lt;/foo&amp;gt;  とすればよい。</description>
    </item>
    
    <item>
      <title>KarabinerでEclipseのキーバインドを変更</title>
      <link>https://ymraintree.github.io/blog/post/2015/20150122/</link>
      <pubDate>Thu, 22 Jan 2015 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2015/20150122/</guid>
      <description>eclipse-4.4を使ってみる。Cntl+SPACEでいつものように補完をさせようとするとしなくなった。調べると、Karaibnerがeclipse-4.2と4.4を別に識別しているらしい。~/Library/Application Support/Karabiner/private.xmlを修正する。eclipse-4.2はなにもしないでECLIPSEとして認識されていたが、4.4は
 &amp;lt;appdef&amp;gt; &amp;lt;appname&amp;gt;ECLIPSE_LUNA&amp;lt;/appname&amp;gt; &amp;lt;equal&amp;gt;org.eclipse.platform.ide&amp;lt;/equal&amp;gt; &amp;lt;/appdef&amp;gt;  を定義して、
 &amp;lt;item&amp;gt; &amp;lt;name&amp;gt;Swap Control-Space and Command-Space&amp;lt;/name&amp;gt; &amp;lt;only&amp;gt;ECLIPSE&amp;lt;/only&amp;gt; &amp;lt;identifier&amp;gt;private.chrome.swap_controlSpace_and_commandSpace&amp;lt;/identifier&amp;gt; &amp;lt;autogen&amp;gt;--KeyToKey-- KeyCode::SPACE, VK_CONTROL, KeyCode::SPACE, VK_COMMAND&amp;lt;/autogen&amp;gt; &amp;lt;autogen&amp;gt;--KeyToKey-- KeyCode::SPACE, VK_COMMAND, KeyCode::SPACE, VK_CONTROL&amp;lt;/autogen&amp;gt; &amp;lt;/item&amp;gt;  を
 &amp;lt;item&amp;gt; &amp;lt;name&amp;gt;Swap Control-Space and Command-Space&amp;lt;/name&amp;gt; &amp;lt;only&amp;gt;ECLIPSE, ECLIPSE_LUNA&amp;lt;/only&amp;gt; &amp;lt;identifier&amp;gt;private.chrome.swap_controlSpace_and_commandSpace&amp;lt;/identifier&amp;gt; &amp;lt;autogen&amp;gt;--KeyToKey-- KeyCode::SPACE, VK_CONTROL, KeyCode::SPACE, VK_COMMAND&amp;lt;/autogen&amp;gt; &amp;lt;autogen&amp;gt;--KeyToKey-- KeyCode::SPACE, VK_COMMAND, KeyCode::SPACE, VK_CONTROL&amp;lt;/autogen&amp;gt; &amp;lt;/item&amp;gt;  とするとキーバインドを変更できる。</description>
    </item>
    
    <item>
      <title>Yosemite</title>
      <link>https://ymraintree.github.io/blog/post/2015/20150122-2/</link>
      <pubDate>Thu, 22 Jan 2015 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2015/20150122-2/</guid>
      <description>OSを10.10.1Yosemiteにアップグレードしたところ、eclipse-4.2-junoが起動しなくなった。古いjavaが削除されたらしい。JavaForOSX2014-001.dmgをダウンロードしてインストールしたら起動。しかし、ビルドパスに問題があって、QTJava.zipがないとのこと。こちらはとりあえず、TimeMachineから取り出してクリア。</description>
    </item>
    
    <item>
      <title>scala-2.9のscala.reflect.BeanPropertyが2.11ではscala.beans.BeanPropertyに変更されていた</title>
      <link>https://ymraintree.github.io/blog/post/2015/20150122-3/</link>
      <pubDate>Thu, 22 Jan 2015 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2015/20150122-3/</guid>
      <description>表記の件で、システムのscala-libraryを2.11にあげようとすると、importを変更しなければならない。そこで、
package foo.bar class BeanPropery extends scala.reflect.BeanProperty  というクラスを作って、徐々にこれに切り替えておき、2.11に移行するときに上記クラスを
package foo.bar class BeanPropery extends scala.beans.BeanProperty  に変更すれば一発で移行できるので便利。ところが、実際に試してみると、2.11ではうまくいくが、2.9ではgetterは生成されるがsetterが生成されないようで、エラーになってしまう。惜しい。</description>
    </item>
    
    <item>
      <title>play frameworkのアプリケーションを本番で運用するときに注意すること</title>
      <link>https://ymraintree.github.io/blog/post/2015/20150120/</link>
      <pubDate>Tue, 20 Jan 2015 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2015/20150120/</guid>
      <description>開発中は
http://localhost:9000/foo  などのURLで動作確認するが、開発が終わって本番で稼働するとき、
http://liveserver.boo.com/foo  などのURLでアプリケーションにアクセスするようにhttpdの設定をして動かしてみると、なぜか動かない。よくみると、javascriptが動いていない。
これはconf/routesファイルの
GET /assets/*file controllers.Assets.at(path=&amp;quot;/public&amp;quot;, file)  を
GET /foo/assets/*file controllers.Assets.at(path=&amp;quot;/public&amp;quot;, file)  と修正すれば動くようになる。</description>
    </item>
    
    <item>
      <title>イメージファイルの圧縮</title>
      <link>https://ymraintree.github.io/blog/post/2014/20141120/</link>
      <pubDate>Thu, 20 Nov 2014 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2014/20141120/</guid>
      <description>kvmでゲストOSをqcow2で運用していると、だんだんとイメージファイルのサイズが大きくなってくる。これをqemu-imgで圧縮するのだが、70G程度あるイメージファイルを圧縮するのに2時間弱かかる。この間ゲストOSを止めておくことができないばあいは、以下の手順だとダウンタイムが少なくてすむ。
 ゲストOSの停止 スナップショット作成 スナップショットで起動 イメージファイル（本体）の圧縮 スナップショットの統合  </description>
    </item>
    
    <item>
      <title>セッションの使用</title>
      <link>https://ymraintree.github.io/blog/post/2014/20141107/</link>
      <pubDate>Fri, 07 Nov 2014 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2014/20141107/</guid>
      <description>play-2.2.3を使用。セッションを使ってコントローラからビューへ値を渡す。sessionの受け渡しを追加し、その内容を.withSessionに入れる。
コントローラ側
 Ok(views.html.index(&amp;quot;&amp;quot;)(session)).withSession(&amp;quot;foo&amp;quot;-&amp;gt;&amp;quot;FOOO&amp;quot;, &amp;quot;bar&amp;quot;-&amp;gt;&amp;quot;BAR&amp;quot;)  ビュー側
 @(message: String)(session:play.api.mvc.Session) @session.get(&amp;quot;foo&amp;quot;)  </description>
    </item>
    
    <item>
      <title>ファイルのアップロード</title>
      <link>https://ymraintree.github.io/blog/post/2014/20141106/</link>
      <pubDate>Thu, 06 Nov 2014 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2014/20141106/</guid>
      <description>画像ファイルをアップロードするページで、画像を保存するフォルダはplayの外にあり、public/imagesにシンボリックリンクしている場合、アップロードされた画像がページ上に反映されない。
これは、実際の画像ファイルを
./target/scala-2.10/classes/public/images/myimg/xxxxxx.jpg
から参照しているからで、ためしにこのmyimgフォルダもシンボリックリンクにしてみたらうまく反映するようになった。</description>
    </item>
    
    <item>
      <title>スナップショット作成でエラーになったとき</title>
      <link>https://ymraintree.github.io/blog/post/2014/20140818/</link>
      <pubDate>Mon, 18 Aug 2014 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2014/20140818/</guid>
      <description>kvmのqcow2からvmwareのvmdkへコンバートした仮想マシンをvmwareで起動して、とりあえずスナップショットを取ろう、と実行すると、「&amp;hellip;..vmsn」を保存中にエラーが発生しました。」というエラーでパワーオフまでいってしまう。ディレクトリをみると、xxxVM-00001-s999.vmdkのようなファイルが多数あっておかしな状態に。パワーオンしても、「xxxVM-000001.vmdk」、またはディスク「xxxVM-000001.vmdk」が依存しているスナップショット ディスクの 1 つを開くことができません。 」というエラーで起動できない。
どうもスナップショットを作り損なったのに設定的にはスナップショットができているという状態のようなので、xxxVM.vmxをみると、
ide1:1.fileName = &amp;quot;xxxVM-000001.vmdk&amp;quot;  という行があるので、これを
ide1:1.fileName = &amp;quot;xxxVM.vmdk&amp;quot;  に変更しパワーオンしたらできた。そこで、パワーオフしてxxxVM-000001*を削除し、再度パワーオンしたら正常起動。これで復旧できたようにみえる。</description>
    </item>
    
    <item>
      <title>vmdkの圧縮</title>
      <link>https://ymraintree.github.io/blog/post/2014/20140813/</link>
      <pubDate>Wed, 13 Aug 2014 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2014/20140813/</guid>
      <description># du -h liveVM20140813/ 269.6G liveVM20140813/ #  このシステムを圧縮。実際には50Gくらい。
# date; time vmkfstools --punc hzero liveVM20140813/liveVM20140813.vmdk; date Wed Aug 13 13:02:13 UTC 2014 vmfsDisk: 1, rdmDisk: 0, blockSize: 1048576 Hole Punching: 100% done. real 6m 9.12s user 1m 11.53s sys 0m 0.00s Wed Aug 13 13:08:22 UTC 2014 # du -h liveVM20140813/ 269.6G liveVM20140813/ #  全然減らない。
そこで、未使用領域をゼロ埋めしてみる。ゼロファイルを作ったらすぐ削除。
$ df -h Filesystem Size Used Avail Use% Mounted on /dev/sda1 95G 3.</description>
    </item>
    
    <item>
      <title>qcow2からvmdkへ変換するとき</title>
      <link>https://ymraintree.github.io/blog/post/2014/20140805/</link>
      <pubDate>Tue, 05 Aug 2014 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2014/20140805/</guid>
      <description>-rw-r--r-- 1 root root 28G 8月 5 17:37 zabbixVM.img  のファイルをvmdkに変換するとき、圧縮してから変換したほうがvmdkのサイズが小さくなるかと以下のように実行。
$ time sudo qemu-img convert -c -p -f qcow2 -O qcow2 zabbixVM.img zabbixVM.compact.img real	19m57.342s user	18m2.423s sys	0m24.398s $ ls -lh -rw-r--r-- 1 root root 7.4G 8月 5 18:22 zabbixVM.compact.img -rw-r--r-- 1 root root 28G 8月 5 17:37 zabbixVM.img $ time sudo qemu-img convert -p -f qcow2 -O vmdk zabbixVM.compact.img zabbixVM.vmdk real	78m36.654s user	5m4.354s sys	2m59.439s $ ls -lh -rw-r--r-- 1 root root 7.</description>
    </item>
    
    <item>
      <title>vmdkのクローン</title>
      <link>https://ymraintree.github.io/blog/post/2014/20140804/</link>
      <pubDate>Mon, 04 Aug 2014 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2014/20140804/</guid>
      <description># date; vmkfstools -i foo/barVM.vmdk zoo.vmdk -d thin; date  </description>
    </item>
    
    <item>
      <title>Teamviewerが遅いとき</title>
      <link>https://ymraintree.github.io/blog/post/2014/20140708/</link>
      <pubDate>Tue, 08 Jul 2014 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2014/20140708/</guid>
      <description>PCを新しくしたところ、teamviewerの画面描画が遅くて使いものにならなくなってしまった。オプション&amp;ndash;&amp;gt;詳細&amp;ndash;&amp;gt;UDPの使用（推奨）をオフにすると速度が出るようになる。理由はわからない。</description>
    </item>
    
    <item>
      <title>Playframework 2.2で非同期メール送信</title>
      <link>https://ymraintree.github.io/blog/post/2014/20140630/</link>
      <pubDate>Mon, 30 Jun 2014 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2014/20140630/</guid>
      <description>Playで作っているアプリケーションでメール送信が必要になり、普通に書いてみたらメール送信が遅いので画面に制御が帰ってくるまで時間がかかってしまった。手っ取り早く非同期でメールを送信するように改良してみた。
プロジェクト直下のbuild.sbt
libraryDependenciesに
&amp;quot;play.modules.mailer&amp;quot; %% &amp;quot;play-mailer&amp;quot; % &amp;quot;2.1.3&amp;quot;  を追加。
resolvers ++= Seq( &amp;quot;Rhinofly Internal Release Repository&amp;quot; at &amp;quot;http://maven-repository.rhinofly.net:8081/artifactory/libs-release-local&amp;quot; )  を追加。
conf/application.confに
mail.failTo=&amp;quot;(sender address)&amp;quot; mail.host=smtp.gmail.com mail.port=465 mail.username=&amp;quot;foo@coo.bar.com&amp;quot; mail.password=xxxxxxxx  を追加。
Application.scalaで送信。エラー処理などはまたこんど。
import play.modules.mailer._ import scala.concurrent._ import ExecutionContext.Implicits.global // 添付ファイルの用意 val bis = new BufferedInputStream(new FileInputStream(pdf)) val bArray = Stream.continually(bis.read).takeWhile(-1 !=).map(_.toByte).toArray val email = Email( subject = &amp;quot;サブジェクト&amp;quot;, from = EmailAddress(&amp;quot;送付者名&amp;quot;, &amp;quot;donotreply@coo.bar.com&amp;quot;), text = body, htmlText = body) .to(&amp;quot;受信者名&amp;quot;, &amp;quot;xxxxx@zoo.co.jp&amp;quot;) .</description>
    </item>
    
    <item>
      <title>automountが刺さったら</title>
      <link>https://ymraintree.github.io/blog/post/2014/20140423/</link>
      <pubDate>Wed, 23 Apr 2014 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2014/20140423/</guid>
      <description>ホームディレクトリをNASに置いて、linuxマシンからはautomountでアクセスするようにしているが、先日NASが異常終了して起動できなくなってしまった。緊急対応として、バックアップのNASサーバを本番のサーバとして使うようにDNSで切り替えた。こんなとき、マシンによってはautomountが以前のサーバにアクセスしようとしてlsコマンドやdfコマンドが刺さってしまう。当該マシンを再起動すればいいことだが、本番運用しているマシンなどは再起動できない。こういうときは
# umount /home/xxx # umount -f /home/xxx # umount -l /home/xxx  の順で実行する。-lだとたいていはumountできるもよう。</description>
    </item>
    
    <item>
      <title>ubuntu 起動が遅い場合</title>
      <link>https://ymraintree.github.io/blog/post/2014/20140122/</link>
      <pubDate>Wed, 22 Jan 2014 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2014/20140122/</guid>
      <description>kvmのゲストOSにubuntu12.04を使っているが、ネットワークの設定を変更してひとつのNICに複数のIPアドレスを振るようにしたらOSの起動時に
Waiting for network configuration...  や
Waiting up to 60 more seconds for network configuration...  が出て遅くなってしまった。
とりあえず、/etc/init/failsafe.confを修正。
sleep 20をsleep 5に変え、
$PLYMOUTH message --text=&amp;quot;Waiting for network configuration...&amp;quot; || : sleep 40 $PLYMOUTH message --text=&amp;quot;Waiting up to 60 more seconds for network configuration...&amp;quot; || : sleep 59 $PLYMOUTH message --text=&amp;quot;Booting system without full network configuration...&amp;quot; || : sleep 1  をコメントアウトすると起動は速くなる。</description>
    </item>
    
    <item>
      <title>play frameworkの自動起動設定</title>
      <link>https://ymraintree.github.io/blog/post/2014/20140120/</link>
      <pubDate>Mon, 20 Jan 2014 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2014/20140120/</guid>
      <description>簡単なplayのアプリケーションを作ってさくっとデプロイして本番運用していたが、本番機のロードアベレージが常に1を上回るようになってびっくり。調べると、playのプロセスがCPUを専有していた。単純にplay runで起動していたが、これを変更。
プロジェクト内で
$ play clean compile stage  を実行して、target/startファイルが作る。このとき自動起動の環境が整えられるらしい。あとは/etc/init.d/playなどに、
	cd /usr/local/play/name_of_project target/start -server -Xms128m -Xmx128m &amp;amp;  などとするとよい。終了用には
	cd /usr/local/play/name_of_project kill -TERM `cat RUNNING_PID`  play-2.2.3で変更があったもよう。startコマンドはtarget直下ではなく、
target/universal/stage/bin/name_of_project  に変更になった。コマンド名もstartではなくなった。起動スクリプトには以下のように書くべし。
	cd /usr/local/play-2.2.3/name_of_project target/universal/stage/bin/name_of_project -Dhttp.port=9001 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;  停止時に使うRUNNING_PIDもtarget直下からtarget/universal/stageに移動した。</description>
    </item>
    
    <item>
      <title>実行可能Jarファイルの設定</title>
      <link>https://ymraintree.github.io/blog/post/2013/20131111/</link>
      <pubDate>Mon, 11 Nov 2013 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20131111/</guid>
      <description>Java7になってから、実行可能jarファイルでアプリケーションを起動すると、「JARファイルのマニフェストに権限属性が含まれていないため、このアプリケーションは、今後のJavaセキュリティ・アップデートでブロックされます。」というメッセージが表示されるようになった。これを解消するには、実行可能JarのMANIFEST.MFに
Permissions: all-permissions Codebase: *.foo.bar.com  を追加する。</description>
    </item>
    
    <item>
      <title>Java Web Startの仕様変更</title>
      <link>https://ymraintree.github.io/blog/post/2013/20131025/</link>
      <pubDate>Fri, 25 Oct 2013 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20131025/</guid>
      <description>Java Web Startで起動するアプリケーションが、Java7 45にアップデートしたら動かなくなった。動かなくなったとはいっても、アプリケーション自身は起動するが、途中でエラーになってしまう。エラーの内容からすると、アプリケーションに渡っているべき環境変数が渡っていない模様。この変数は.jnlpのresourcesタグ内で
&amp;lt;property name=&amp;quot;arg1&amp;quot; value=&amp;quot;FOOBAR&amp;quot;/&amp;gt;  のように渡していた。Java側では
String foo = System.getProperty(&amp;quot;arg1&amp;quot;);  で受け取ることができた。
これができなくなったようなので調べてみたら http://docs.oracle.com/javase/jp/1.5.0/guide/javaws/developersguide/syntax.html の解説にあるように、
&amp;lt;property name=&amp;quot;jnlp.arg1&amp;quot; value=&amp;quot;FOOBAR&amp;quot;/&amp;gt;  のようにするとVMに引数を渡すことができるんだと。</description>
    </item>
    
    <item>
      <title>scalaとjavaのコレクションのやり取り</title>
      <link>https://ymraintree.github.io/blog/post/2013/20131010/</link>
      <pubDate>Thu, 10 Oct 2013 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20131010/</guid>
      <description>もっといい方法があると思うけれど、とりあえず実現できたやり方
scalaのMapのvaluesをjava.util.Collectionに変換する
new java.util.ArrayList[UriageForRanking](result.values)  </description>
    </item>
    
    <item>
      <title>chromeのポップアップをタブで開く</title>
      <link>https://ymraintree.github.io/blog/post/2013/20131001/</link>
      <pubDate>Tue, 01 Oct 2013 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20131001/</guid>
      <description>リンクをクリックするとポップアップが表示されるかわりにタブで表示させるのに、chromeではTab Position Customizerという機能拡張を使ってきたが、いつのまにかchromeウェブストアからなくなっている。ぐぐってみたらウェブストアでないところに、Tab_Position_Customizer_2.9.1_0.crxというファイルがあるので、これをダウンロードし、chromeに機能拡張の一覧を表示させてそこにドラッグするとインストールできる。</description>
    </item>
    
    <item>
      <title>デスクトップフォルダの変更</title>
      <link>https://ymraintree.github.io/blog/post/2013/20130920/</link>
      <pubDate>Fri, 20 Sep 2013 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20130920/</guid>
      <description>最近virt-managerを使うことが増えて、vncでlinuxにGUIのアクセスをするようになったが、ホームディレクトリにPublicとかDesktopとかフォルダを作られてしまうのがうざい。なので、~/.config/user-dirs.dirsの内容を修正して、別の場所に作られるようにした。</description>
    </item>
    
    <item>
      <title>kvm イメージファイルの操作</title>
      <link>https://ymraintree.github.io/blog/post/2013/20130919/</link>
      <pubDate>Thu, 19 Sep 2013 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20130919/</guid>
      <description>以下のコマンドで差分ファイルを作ることができる。
$ sudo qemu-img create -b vm.test.img -f qcow2 vm.test.diff.img  以後、vm.test.diff.imgで起動するとベースのvm.test.imgは変更されない。
$ ls -l vm.test.* -rw-r--r-- 1 root root 198656 9月 19 11:46 vm.test.diff.img -rw------- 1 root root 58913259520 9月 19 11:44 vm.test.img $ $ ls -l vm.test.* -rw-r--r-- 1 root root 24838144 9月 19 11:59 vm.test.diff.img -rw------- 1 libvirt-qemu kvm 58913259520 9月 19 11:44 vm.test.img $  差分をベースにコミットするには以下のコマンド。
$ sudo qemu-img commit -f qcow2 vm.test.diff.img  これで差分はいらなくなる。
この方式だと、ベースのイメージが差分バックアップの対象とならないので、バックアップの効率はよくなる。</description>
    </item>
    
    <item>
      <title>scala objectのMock その2</title>
      <link>https://ymraintree.github.io/blog/post/2013/20130906/</link>
      <pubDate>Fri, 06 Sep 2013 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20130906/</guid>
      <description>どうもJMockitではscalaのobjectをモック化できないようなので、scalaベースのscalamockを試してみる。scalamockはsbt, scalatestの使用を前提としているため、sbtでプロジェクトを作る。プロジェクトの構成がsbtの構成になってしまうので、これもちょっと困る。環境構築に必要なファイルは以下
$PROJECT_ROOT/build.sbt name := &amp;quot;test.sbt&amp;quot; version := &amp;quot;1.0&amp;quot; scalaVersion := &amp;quot;2.9.2&amp;quot; libraryDependencies ++= Seq( &amp;quot;org.scalatest&amp;quot; %% &amp;quot;scalatest&amp;quot; % &amp;quot;1.8&amp;quot; % &amp;quot;test&amp;quot;, &amp;quot;org.scalamock&amp;quot; %% &amp;quot;scalamock-scalatest-support&amp;quot; % &amp;quot;2.3&amp;quot;, &amp;quot;junit&amp;quot; % &amp;quot;junit&amp;quot; % &amp;quot;latest.integration&amp;quot; % &amp;quot;test&amp;quot;, &amp;quot;commons-logging&amp;quot; % &amp;quot;commons-logging&amp;quot; % &amp;quot;1.1.1&amp;quot; ) $PROJECT_ROOT/project/Build.scala import sbt._ import Keys._ import ScalaMockPlugin._ object MyProject extends Build { override lazy val settings = super.settings ++ Seq( organization := &amp;quot;&amp;quot;, version := &amp;quot;1.0&amp;quot;, scalaVersion := &amp;quot;2.9.2&amp;quot;, libraryDependencies += &amp;quot;org.</description>
    </item>
    
    <item>
      <title>scala objectのMock</title>
      <link>https://ymraintree.github.io/blog/post/2013/20130904/</link>
      <pubDate>Wed, 04 Sep 2013 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20130904/</guid>
      <description>テストコードでscalaのobjectをモック化したい。
モック化したいobjectは以下。このクラスはJavaからも呼ぶため、class宣言もしている。
class Boo object Boo { val log = LogFactory.getLog(this.getClass()) def foo = { log.debug(&amp;quot;Boo#foo called&amp;quot;) true } }  これをモック化するコード
@MockClass(realClass=classOf[Boo]) object BooMock { val log = LogFactory.getLog(this.getClass()) @Mock def foo = { log.debug(&amp;quot;BooMock#foo called&amp;quot;) false } }  テストコード
class JMockitTest { val log = LogFactory.getLog(this.getClass()) @Test def foo { setUpMocks(classOf[BooMock]) log.debug(Boo.foo) } }  これを実行しても、
DEBUG (JMockitTest.scala:15) Boo#foo called DEBUG (JMockitTest.scala:51) true  となって、モックが呼ばれない。
一方で、テストコードをJavaにしてみる。
public class JMockit2Test { private static Log log = LogFactory.</description>
    </item>
    
    <item>
      <title>windows上のvirtualboxでゲストの解像度が1920x1050になっちゃった</title>
      <link>https://ymraintree.github.io/blog/post/2013/20130816/</link>
      <pubDate>Fri, 16 Aug 2013 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20130816/</guid>
      <description>virtualboxのゲストにwindowsを新規インストールして起動。ホストには1920x1080のディスプレイがついているので、ゲストでも当然出せるはずだが、インストール直後にちょっとシームレスモードを試したのが悪かったのか、フルスクリーンモードにしても1920x1050になって天地が余ってしまう。ホストで
&amp;gt; VBoxManage nameOfVM winbox setvideomodehint 1920 1080 32  とか
&amp;gt; VBoxManage setextradata nameOfVM CustomVideoMode1 1920x1080x32  とかやってもかわらず、確かフルスクリーンモードにして、画面下部に出てくるミニツールバーで「ウィンドウサイズの調整」をしたら1920x1080が出るようになった、と思う。いろいろやっているうちに出るようになったので、いまひとつ確信が持てないけれど。
ちなみに、windowsホスト上でゲストを非表示で起動・終了するには以下のようなスクリプトがあるとよい。
start.vbs CreateObject(&amp;quot;WScript.Shell&amp;quot;).Run &amp;quot;&amp;quot;&amp;quot;C:\Program Files\VirtualBox\VBoxHeadless.exe&amp;quot;&amp;quot; -s nameOfVM&amp;quot;, 0 stop.vbs CreateObject(&amp;quot;WScript.Shell&amp;quot;).Run &amp;quot;&amp;quot;&amp;quot;C:\Program Files\VirtualBox\VBoxManage.exe&amp;quot;&amp;quot; controlvm nameOfVM poweroff&amp;quot;, 0  </description>
    </item>
    
    <item>
      <title>linux上のvirtualboxのゲストで1920x1080を表示させる</title>
      <link>https://ymraintree.github.io/blog/post/2013/20130815/</link>
      <pubDate>Thu, 15 Aug 2013 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20130815/</guid>
      <description>手元のディスプレイが1920x1080でも、virtualboxが乗っているホストにディスプレイがついていない場合、解像度の設定に手間取ることがある。この場合、
 ホストを起動 ホストにsshでログイン $ vnc4server -geometry 1920x1080 手元でvnc接続 virtualboxでゲスト起動  とすると、ゲストの解像度で1920x1080が選べるようになる。ちなみに、ホスト上で
$ vboxmanage startvm guestVM --type headless  とするとゲストを非表示で起動することができる。</description>
    </item>
    
    <item>
      <title>ゲストOSのディスク容量を増やす</title>
      <link>https://ymraintree.github.io/blog/post/2013/20130814/</link>
      <pubDate>Wed, 14 Aug 2013 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20130814/</guid>
      <description>ディスク容量100Gで気楽に作ったゲストOSをそのまま運用で使うことになり、500Gへ増やすことにした。
ゲストOS停止 バックアップ
qemu-img resize aplivevm +400G  これだけだと、ホストからみた容量は増えたが、ゲストからするとあいかわらず100Gのまま。使用量が100Gを超えるとパンクする。
そこで、ゲストを起動し、
# shutdown now  でシングルユーザモードへ移行。virt-managerのコンソールにシングルユーザモードのシェルがでるので、
# fdisk /dev/vda  を使うが、ルートパーティションはそのままにして、別のパーティションを追加（/dev/vda3）する。OSを再起動させ、
# mkfs.ext4 /dev/vda3  としたところで、なぜかゲストOS死亡。ためしに
# mkfs.ext3 /dev/vda3  はできた。その後
# mkfs.ext4 -j /dev/vda3  もできたのでよしとする。</description>
    </item>
    
    <item>
      <title>qcow2でイメージファイルを作る</title>
      <link>https://ymraintree.github.io/blog/post/2013/20130812/</link>
      <pubDate>Mon, 12 Aug 2013 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20130812/</guid>
      <description>イメージファイルをqcow2フォーマットで作る場合は、virt-managerで新規作成する前に、ホスト側で
$ sudo qemu-img create -f qcow2 baseVM-windows7.img 500G  としておく。500Gは上限値で、作った当初のサイズは200kにも満たない。</description>
    </item>
    
    <item>
      <title>linuxでiscsi&#43;ocfs2</title>
      <link>https://ymraintree.github.io/blog/post/2013/20130313/</link>
      <pubDate>Wed, 13 Mar 2013 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20130313/</guid>
      <description>iscsiはひとつのパーティションをひとつのマシンに割り当てるため、NFSほどの自由がなく敬遠してきたが、ocfs2というフォーマットを使えば複数のマシンにアタッチできるというのでやってみる。
iscsiターゲットの構築
$ sudo apt-get install iscsitarget $ sudo apt-get install iscsitarget-dkms  /etc/iet/ietd.confを編集
Target iqn.2013-03.testIscsiVM.sdb1:testIscsiVM-loopback Lun 0 Path=/dev/sdb1,Type=blockio  のようにiscsiで公開するパーティションを指定。
/etc/default/iscsitargetを編集
ISCSITARGET_ENABLE=true  iscsitarget起動
$ sudo /etc/init.d/iscsitarget start  ここから、iscsi用のパーティションをocfs2でフォーマットする作業。
iscsiイニシエータをインストール
$ sudo apt-get install open-iscsi  ocfs2をインストール
$ sudo apt-get install ocfs2-tools  $ sudo iscsiadm -m discovery -t sendtargets -p testIscsiVM 10.5.34.142:3260,1 iqn.2013-03.testIscsiVM.sdb1:testIscsiVM-loopback $ sudo iscsiadm -m node --targetname iqn.2013-03.testIscsiVM.sdb1:testIscsiVM-loopback --login $ sudo iscsiadm -m session  このとき、syslogにiscsiのパーティションがアタッチされたことが出力され、デバイスファイル名（/dev/sdcなど）もわかるので、そのデバイスをocfs2でフォーマットする。</description>
    </item>
    
    <item>
      <title>ubuntuにKVMをインストール</title>
      <link>https://ymraintree.github.io/blog/post/2013/20130313-2/</link>
      <pubDate>Wed, 13 Mar 2013 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20130313-2/</guid>
      <description>ubuntuは12.04を使用。普通にインストールしたのち、
$ sudo apt-get install kvm libvirt-bin bridge-utils virt-manager  デフォルトではゲストOSのネットワークはNATで接続するようになっているが、ゲストOSを各種サーバとして使うために、StaticなIPアドレスが割り当てられるようにブリッジ接続に変更する。
NAT用のインタフェースを削除する
$ sudo brctl show $ sudo virsh net-autostart default --disable $ sudo virsh net-destroy default $ sudo brctl show  /etc/network/interfacesの変更。以下のようにbr0を追加する。
auto lo iface lo inet loopback auto eth0 iface eth0 inet manual auto br0 iface br0 inet static address 10.5.34.145 network 10.5.0.0 netmask 255.255.0.0 broadcast 10.5.255.255 gateway 10.5.34.254 dns-nameservers 10.4.34.1 dns-search foo.bar.co.jp bridge_ports eth0 bridge_fd 9 bridge_hello 2 bridge_maxage 12 bridge_stp off  10.</description>
    </item>
    
    <item>
      <title>heartbeat管理下のIPアドレスが消えるトラブル</title>
      <link>https://ymraintree.github.io/blog/post/2013/20130226/</link>
      <pubDate>Tue, 26 Feb 2013 15:59:40 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20130226/</guid>
      <description>drbd+heartbeatを使用して運用しているサーバで、障害が発生。今までもheartbeatが障害を検知してセカンダリにtakeoverしようとして途中でエラーが発生しtakeoverをあきらめてしまうという現象はあったが、今回はちょっと違った。
以前と同じ現象ならばdrbd配下のパーティションがプライマリにもセカンダリにもマウントされていないような状態になるが、今回はdrbdのパーティションがプライマリに正常にマウントされている。
結局異常があったのはサービスIPアドレスのみ。普段は以下のように実アドレスとは別に付与され、サーバのアドレスとして使用しているが、これだけがなくなっていた。
eth1:1 Link encap:Ethernet HWaddr 8c:89:a5:c3:d8:fb inet addr:10.5.34.125 Bcast:10.5.255.255 Mask:255.255.0.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 Interrupt:20 Memory:f4400000-f4420000  syslogを見てもheartbeat関連のログは残っていなかったが、かわりに
Feb 25 01:51:25 apollo2 kernel: [3666623.094611] e1000e: eth1 NIC Link is Down  が残っていた。その後、6秒ほどでNICは復活。つまり、NICがダウンしたことで、heartbeatが付与しているサービスIPアドレスは消えてしまった。その後NICが復活するも、短時間で復旧したためにheartbeatも障害を検知しなかった。したがってサービスIPアドレスは消えたまま、という推測が成り立つ。
とりあえず、消えてしまったサービスIPアドレスを改めて付与するため、以下のheartbeatのコマンドを使用。
$ sudo ./IPaddr 10.5.34.125/16/eth1 start  ちなみに
$ sudo ./IPaddr 10.5.34.125/16/eth1 stop  とすればIPアドレスを削除することができる。</description>
    </item>
    
    <item>
      <title>linuxでsambaのディスクをマウントする</title>
      <link>https://ymraintree.github.io/blog/post/2013/20130215/</link>
      <pubDate>Fri, 15 Feb 2013 16:02:43 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20130215/</guid>
      <description>ubuntuでNASのディスクをマウントする。
$ sudo apt-get install smbfs  でパッケージをインストール。
$ sudo smbmount //foo.bar.co.jp/zoo /zoo -o username=xxxxxx  アンマウントはumountコマンドでよい。
$ sudo umount /zoo  </description>
    </item>
    
    <item>
      <title>Javaとの混在環境でのScala</title>
      <link>https://ymraintree.github.io/blog/post/2013/20130214/</link>
      <pubDate>Thu, 14 Feb 2013 16:05:09 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20130214/</guid>
      <description>もともとJavaで書いているプロジェクトにScalaのコードを混ぜていくと、Eclipseの挙動がおかしくなるときがあって、そういうときはJavaの側からScalaでできているオブジェクトやクラスが軒並み見えなくなる。ビルドしなおしても状況は変わらず。いろいろ試した結果、scalaのobjectを作ったときは同名のクラスも用意しないとJavaがそれらを参照するときにおかしな挙動になるようだ。
 class Foo object Foo { def xxx:String = .... ... }  </description>
    </item>
    
    <item>
      <title>VirtualBoxでSkyDrive</title>
      <link>https://ymraintree.github.io/blog/post/2013/20130208/</link>
      <pubDate>Fri, 08 Feb 2013 16:07:21 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20130208/</guid>
      <description>VirtualBox上にインストールしたWindows7でSkyDriveを使おうとしても、クラウドにあるファイルのダウンロードがまったく進まない。ちょっと調べて、VirtualBoxのWindows7のネットワーク設定をデフォルトのNATからブリッジアダプターに変更してIPアドレスを別に振るとうまくいくようになった。
参考URL: http://nosuchblogger.com/post/243/virtualbox-and-skydrive</description>
    </item>
    
    <item>
      <title>MacOS10.6.8アップデートでjavawsが動かなくなった</title>
      <link>https://ymraintree.github.io/blog/post/2013/20130201/</link>
      <pubDate>Fri, 01 Feb 2013 16:08:43 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20130201/</guid>
      <description>表記のとおりの現象が起き、javawsを利用した業務システムが動かなくなるという怖い現象が起きた。いろいろ調べた結果、Java for OS X Developer Preview 11M4001+10M4001というものがあるというので、apple developers centerからjavadeveloper_for_mac_os_x_10.6_update_12__10m4001.dmgをダウンロードしてインストールすると解決する。これにより、javaのバージョンは1.6.0_37から1.6.0_38に上がった。</description>
    </item>
    
    <item>
      <title>リモートからのEJB呼び出し</title>
      <link>https://ymraintree.github.io/blog/post/2013/20130129/</link>
      <pubDate>Tue, 29 Jan 2013 15:28:41 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20130129/</guid>
      <description>なかなか呼び出せなくて苦労したが、できてしまえば簡単。以下のメソッドを用意する。
private def getBean:ZZZZZZSession = { val props = new Hashtable[String, AnyRef]; props.put(Context.INITIAL_CONTEXT_FACTORY, &amp;quot;org.jboss.naming.remote.client.InitialContextFactory&amp;quot;); props.put(Context.PROVIDER_URL, &amp;quot;remote://foo.bar.com:4447&amp;quot;); props.put(Context.SECURITY_PRINCIPAL, &amp;quot;appuser&amp;quot;); props.put(Context.SECURITY_CREDENTIALS, &amp;quot;xxxxxx&amp;quot;); props.put(&amp;quot;jboss.naming.client.ejb.context&amp;quot;, true.asInstanceOf[java.lang.Boolean]); //	props.put(Context.URL_PKG_PREFIXES, &amp;quot;org.jboss.ejb.client.naming&amp;quot;); val ctxRemote = new InitialContext(props); ctxRemote.lookup(&amp;quot;yyyyyy/ZZZZZZSessionBean!boo.zoo.ZZZZZZSession&amp;quot;).asInstanceOf[ZZZZZZSession] }  上記yyyyyyはデプロイしたjarの名称（.jarは除く）。これでセッションビーンが取得できるので、メソッドも呼び出せるようになる。</description>
    </item>
    
    <item>
      <title>JBoss7にscalaで書いたプロジェクトをデプロイする</title>
      <link>https://ymraintree.github.io/blog/post/2013/20130128/</link>
      <pubDate>Mon, 28 Jan 2013 15:31:04 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20130128/</guid>
      <description>scalaで書いたEJBのプロジェクトをデプロイするには、
modules/org/scala/mainディレクトリ作成して、modules.xmlを以下の内容で作成。scala-library.jarも置く。
&amp;lt;module xmlns=&amp;quot;urn:jboss:module:1.1&amp;quot; name=&amp;quot;org.scala&amp;quot;&amp;gt; &amp;lt;resources&amp;gt; &amp;lt;resource-root path=&amp;quot;scala-library.jar&amp;quot;/&amp;gt; &amp;lt;/resources&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/module&amp;gt;  scalaを参照するEJBプロジェクトはMETA-INFに以下の内容でjboss-deployment-structure.xmlを作成。
&amp;lt;jboss-deployment-structure&amp;gt; &amp;lt;deployment&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;module name=&amp;quot;org.scala&amp;quot; /&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/deployment&amp;gt; &amp;lt;/jboss-deployment-structure&amp;gt;  これでデプロイが正常にされる。
上記設定をせずに、scala-library.jarをstandalone/deploymentsに入れてEJBプロジェクトをデプロイしても、
java.lang.NoClassDefFoundError: scala/ScalaObject  のエラーが出て正常にデプロイできない。
&amp;lt;&amp;lt;追記&amp;gt;&amp;gt; その後の調査で、scala-library.jarをstandalone/deploymentへ置き、jboss-deployment-structure.xmlに
&amp;lt;module name=&amp;quot;deployment.scala-library.jar&amp;quot; /&amp;gt;  で参照できると判明。</description>
    </item>
    
    <item>
      <title>openntpdとisc-dhcp-serverの自動起動</title>
      <link>https://ymraintree.github.io/blog/post/2013/20130125/</link>
      <pubDate>Fri, 25 Jan 2013 15:33:57 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20130125/</guid>
      <description>openntpdとisc-dhcp-serverが、ubuntu起動時に起動しない。ただし、OS起動後に/etc/init.d/openntpd startとすると起動する。/etc/rc5.dにあるS20openntpd, S20isc-dhcp-serverをS99に移動したりしてみたがだめ。S99rc.localから実行される/etc/rc.localに
/etc/init.d/isc-dhcp-server start /etc/init.d/openntpd start exit 0  と書いてみたらdhcpdは起動するようになった。しかし、ntpdはエラー。syslogには以下のメッセージ。
fatal: bind: Cannot assign requested address  そこで、/etc/rc.localを
/etc/init.d/isc-dhcp-server start sleep 10 /etc/init.d/openntpd start exit 0  としたら動くようになった。</description>
    </item>
    
    <item>
      <title>Mac emacsのバージョン</title>
      <link>https://ymraintree.github.io/blog/post/2013/20130117/</link>
      <pubDate>Thu, 17 Jan 2013 15:35:29 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20130117/</guid>
      <description>brewでemacsをインストールすると、24.2.1が入ったが、以前使っていた23に比べて、
sshでリモートマシンにログインした時のファイル名補完が遅い。 別のアプリでコピーしたテキストを中ボタンクリック（マジックトラックパッドでの3本指タップ）でペーストできない。
などの不便な点があり、ためしに、http://emacsformacosx.com/builds　から23.4をダウンロードしてインストールしたら上記問題は解決。しばらくはこれで様子をみる。</description>
    </item>
    
    <item>
      <title>Mac CPAN</title>
      <link>https://ymraintree.github.io/blog/post/2013/20130108/</link>
      <pubDate>Tue, 08 Jan 2013 15:37:25 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2013/20130108/</guid>
      <description>開発用にMac miniを買って、eclipseなどインストールしたところ、perlのスクリプトにJcodeが見えないというエラーが。せっかくだからJcodeをインストール。
bash-3.2$ sudo perl -MCPAN -e shell cpan[1]&amp;gt; install Jcode  ついでにinstall Pgもしたがエラー。
cpan[3]&amp;gt; install Pg Running install for module &#39;Pg&#39; Running make for M/ME/MERGL/pgsql_perl5-1.9.0.tar.gz Checksum for /Users/yano/.cpan/sources/authors/id/M/ME/MERGL/pgsql_perl5-1.9.0.tar.gz ok CPAN.pm: Going to build M/ME/MERGL/pgsql_perl5-1.9.0.tar.gz Configuring Pg Remember to actually read the README file ! please set environment variables POSTGRES_INCLUDE and POSTGRES_LIB ! Warning: No success on command[/usr/bin/perl Makefile.PL] MERGL/pgsql_perl5-1.9.0.tar.gz /usr/bin/perl Makefile.PL -- NOT OK Running make test Make had some problems, won&#39;t test Running make install Make had some problems, won&#39;t install Failed during this command: MERGL/pgsql_perl5-1.</description>
    </item>
    
    <item>
      <title>ssh.el</title>
      <link>https://ymraintree.github.io/blog/post/2012/20121031/</link>
      <pubDate>Wed, 31 Oct 2012 15:39:29 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2012/20121031/</guid>
      <description>ssh.elを使ってリモートホストにアクセスするとき、-l taro付きで開いたバッファ上から別のsshアクセスを-lなしですると、-l taroが付け加えられてしまう。これを防ぐには、init.elに
&#39;(ssh-explicit-args (quote (&amp;quot;-lhanako&amp;quot;)))  のようにデフォルトのユーザ名をセットしておくとよい。</description>
    </item>
    
    <item>
      <title>KeyRemap4MacBookにアプリケーションを追加する</title>
      <link>https://ymraintree.github.io/blog/post/2012/20121024/</link>
      <pubDate>Wed, 24 Oct 2012 15:40:38 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2012/20121024/</guid>
      <description>KeyRemap4MacBookで設定をしていて、TeamViewerへの変更が効かないことに気づいた。調べたところ、
http://pqrs.org/macosx/keyremap4macbook/xml-appdef.html.ja
を参考にしてできた。
メニューバーにあるKeyRemap4MacBookのアイコンからLaunch EventViewerをクリック。 TeamViewerのウィンドウをアクティブにするとEventViewerのCurrent Applicationにcom.teamviewer.TeamViewerと表示される。 private.xmlに以下を追加
&amp;lt;appdef&amp;gt; &amp;lt;appname&amp;gt;TEAMVIEWER&amp;lt;/appname&amp;gt; &amp;lt;equal&amp;gt;com.teamviewer.TeamViewer&amp;lt;/equal&amp;gt; &amp;lt;/appdef&amp;gt;  を追加。これで、設定にTEAMVIEWERというキーワードが使える。</description>
    </item>
    
    <item>
      <title>KeyRemap4MacBookでControlとCommandキーを入れ替える</title>
      <link>https://ymraintree.github.io/blog/post/2012/20121023/</link>
      <pubDate>Tue, 23 Oct 2012 15:41:47 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2012/20121023/</guid>
      <description>Macを使っていると、Emacs, Terminal以外では、ほとんどコントロールキーを使わず、コマンドキーをメインで使う。しかし、コマンドキーは位置がスペースバーのとなりで、ほかのキーと組み合わせるのに押しづらい。なので、Emacs, Terminalなど以外のアプリケーションのときはコントロールキーとコマンドキーを入れ替えることにした。KeyRemap4MacBookの~/Library/Application Support/KeyRemap4MacBook/private.xmlは以下のとおり。
&amp;lt;item&amp;gt; &amp;lt;name&amp;gt;Swap Control and Command&amp;lt;/name&amp;gt; &amp;lt;not&amp;gt;EMACS, TERMINAL, TEAMVIEWER, VIRTUALMACHINE&amp;lt;/not&amp;gt; &amp;lt;identifier&amp;gt;private.swap_control_and_command&amp;lt;/identifier&amp;gt; &amp;lt;autogen&amp;gt;--KeyToKey-- KeyCode::CONTROL_L, KeyCode::COMMAND_L&amp;lt;/autogen&amp;gt; &amp;lt;autogen&amp;gt;--KeyToKey-- KeyCode::COMMAND_L, KeyCode::CONTROL_L&amp;lt;/autogen&amp;gt; &amp;lt;/item&amp;gt;  以前は
&amp;lt;item&amp;gt; &amp;lt;name&amp;gt;Swap Control-/ and Command-/&amp;lt;/name&amp;gt; &amp;lt;only&amp;gt;ECLIPSE&amp;lt;/only&amp;gt; &amp;lt;identifier&amp;gt;private.eclipse.swap_control/_and_command/&amp;lt;/identifier&amp;gt; &amp;lt;autogen&amp;gt;--KeyToKey-- KeyCode::SLASH, VK_CONTROL, KeyCode::SLASH, VK_COMMAND&amp;lt;/autogen&amp;gt; &amp;lt;autogen&amp;gt;--KeyToKey-- KeyCode::SLASH, VK_COMMAND, KeyCode::SLASH, VK_CONTROL&amp;lt;/autogen&amp;gt; &amp;lt;/item&amp;gt;  のように個々のキーの組み合わせを記述していたが、これでは取りこぼしもあるので、全体的に入れ替えるようにしてすっきりした。ただし、カスタマイズしたMacに慣れることで、普通のMacが使えなくなるのでは、という不安が…。</description>
    </item>
    
    <item>
      <title>qnapのcronの設定</title>
      <link>https://ymraintree.github.io/blog/post/2012/20120919/</link>
      <pubDate>Wed, 19 Sep 2012 15:43:03 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2012/20120919/</guid>
      <description>普通にcrontab -eで設定してもなにかのタイミングで消えてしまう。
# vi /etc/config/crontab # /etc/init.d/crond.sh restart  このとき、/tmp/cronを削除なり移動なりしておく。restartで/tmp/cronが作りなおされて初めて有効になる。</description>
    </item>
    
    <item>
      <title>ubuntuでavahi-daemonなどの停止</title>
      <link>https://ymraintree.github.io/blog/post/2012/20120911/</link>
      <pubDate>Tue, 11 Sep 2012 15:44:06 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2012/20120911/</guid>
      <description>サーバとして使っているubuntuなので、avahi-daemonは（たぶん）不要ということで、以下のように起動しないようにした。
$ sudo /etc/init.d/avahi-daemon stop $ sudo update-rc.d -f avahi-daemon remove  他には
$ sudo update-rc.d XXXXXX disable  で起動しなくなるものもあるらしい。</description>
    </item>
    
    <item>
      <title>heartbeat環境構築</title>
      <link>https://ymraintree.github.io/blog/post/2012/20120905/</link>
      <pubDate>Wed, 05 Sep 2012 16:00:51 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2012/20120905/</guid>
      <description>$ dpkg --list|grep heartbeat $ sudo apt-get install heartbeat $ dpkg --list|grep heartbeat  /etc/ha.d/{authkeys, ha.cf, haresources}を設定。元ネタは/usr/share/doc/heartbeatにある。
heartbeatの管理下に置くプロセスはharesourcesに記述するとともに、OS起動時に起動しないようにしておくこと。
起動
$ sudo /etc/init.d/heartbeat start  確認
$ sudo /etc/init.d/heartbeat status  </description>
    </item>
    
    <item>
      <title>drbd環境構築</title>
      <link>https://ymraintree.github.io/blog/post/2012/20120905-2/</link>
      <pubDate>Wed, 05 Sep 2012 15:04:16 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2012/20120905-2/</guid>
      <description>プライマリでの作業
$ dpkg --list|grep drbd $ sudo apt-get install drbd8-utils $ dpkg --list|grep drbd  /etc/drbd.confの設定
メタデータ領域の作成
$ sudo dd if=/dev/zero of=/dev/sda2 bs=20M count=1  メタデータ作成
$ sudo drbdadm create-md r0  ここまでをセカンダリでも同様に行う。ただし/etc/drbd.confは同じ内容なのでscpする。
プライマリ、セカンダリともdrbd起動。このとき、drbdで使用するディスクをアンマウントしておくこと
$ sudo /etc/init.d/drbd start  状態を確認。プライマリ、セカンダリとも以下のように、同期が取れていない状態。
$ cat /proc/drbd version: 8.3.11 (api:88/proto:86-96) srcversion: 71955441799F513ACA6DA60 0: cs:Connected ro:Secondary/Secondary ds:Inconsistent/Inconsistent C r----- ns:0 nr:0 dw:0 dr:0 al:0 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:402439136 $  あるいは</description>
    </item>
    
    <item>
      <title>emacs trampでリモートのファイルをrootで開く</title>
      <link>https://ymraintree.github.io/blog/post/2012/20120904/</link>
      <pubDate>Tue, 04 Sep 2012 16:06:51 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2012/20120904/</guid>
      <description>http://philos0.blog94.fc2.com/blog-entry-20.html
を参考に
init.elに以下を追加
(add-to-list &#39;tramp-default-proxies-alist &#39;(&amp;quot;\\&#39;&amp;quot; &amp;quot;\\`root\\&#39;&amp;quot; &amp;quot;/ssh:%h:&amp;quot;))	(add-to-list &#39;tramp-default-proxies-alist &#39;(&amp;quot;自ホスト名\\&#39;&amp;quot; &amp;quot;\\`root\\&#39;&amp;quot; nil)) (add-to-list &#39;tramp-default-proxies-alist &#39;(&amp;quot;localhost\\&#39;&amp;quot; &amp;quot;\\`root\\&#39;&amp;quot; nil))  C-x C-f /sudo:remoteserver:/etc/hosts  が使えるようになった。</description>
    </item>
    
    <item>
      <title>apt関係のコマンド</title>
      <link>https://ymraintree.github.io/blog/post/2012/20120904-2/</link>
      <pubDate>Tue, 04 Sep 2012 15:08:14 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2012/20120904-2/</guid>
      <description>ubunbuのパッケージ管理に関するコマンド
検索
apt-cache search XXXXXX  インストール
apt-get install XXXXXX  インストール済パッケージの一覧
dpkg --list  アンインストール
apt-get remove XXXXXX  設定まで消すときは
apt-get --purge remove XXXXXX  </description>
    </item>
    
    <item>
      <title>postgres ストリーミングレプリケーション</title>
      <link>https://ymraintree.github.io/blog/post/2012/20120530/</link>
      <pubDate>Wed, 30 May 2012 16:09:52 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2012/20120530/</guid>
      <description>ホットスタンバイ・非同期の設定
準備 ロールの作成
$ psql postgres postgres=# create role repl_user login replication password &#39;xxxxxx&#39;;  アーカイブディレクトリの作成
$ sudo mkdir /usr/local/pgsql/archive $ sudo chown postgres /usr/local/pgsql/archive  設定ファイル postgresql.conf
wal_level = hot_standby archive_mode = on archive_command = &#39;test ! -f /usr/local/pgsql/archive/%f &amp;amp;&amp;amp; cp %p /usr/local/pgsql/archive/%f&#39; max_wal_senders = 2  pg_hba.conf
host replication repl_user 192.168.0.2/32 md5  ベースバックアップ 上記の準備をして、マスタのpostgresを再起動し、設定を反映させる。 スタンバイでベースバックアップ。
$ pg_basebackup -h 192.168.0.1 -p 5432 -U repl_user -D /usr/local/pgsql/data --format=plain --checkpoint=fast --label=label1 --progress --verbose  スタンバイサーバの設定 postgresql.</description>
    </item>
    
    <item>
      <title>heartbeat&#43;drbd&#43;postgresトラブル</title>
      <link>https://ymraintree.github.io/blog/post/2012/20120518/</link>
      <pubDate>Fri, 18 May 2012 16:15:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2012/20120518/</guid>
      <description>これまでpgpoolII+postgresでライブのDBを構成していたが、サーバを安いPCサーバにリプレイスするのをきっかけに、heartbeat+drbd+postgresに変えることにした。
先日、プライマリとなっていたサーバ1が落ち、heartbeatによってセカンダリのサーバ2がプライマリに切り替わった。その際、postgresにエラーが発生。pg_dumpを取ろうとすると、
pg_dump: SQLコマンドが失敗しました pg_dump: サーバのエラーメッセージ: ERROR: could not access status of transaction 4294692688 DETAIL: Could not open file &amp;quot;pg_clog/0FFF&amp;quot;: No such file or directory. pg_dump: 次のコマンドでした: COPY public.ziplog (zipcd, address1, address2, logaction, logdate) TO stdout; pg_dumpall: データベース&amp;quot;common&amp;quot;に対するpg_dumpが失敗しました。終了します  ネットでいろいろ調べ、
 $ dd bs=256k count=1 if=/dev/zero of=0FFF 1+0 records in 1+0 records out 262144 bytes (262 kB) copied, 0.000511307 s, 513 MB/s $  で0FFFファイルを作ってみた。すると、今度は別のclogファイルがないという。
 # select count(*) from ziplog; ERROR: could not access status of transaction 2319990784 DETAIL: Could not open file &amp;quot;pg_clog/08A4&amp;quot;: No such file or directory.</description>
    </item>
    
    <item>
      <title>AWSへrsync</title>
      <link>https://ymraintree.github.io/blog/post/2012/20120517/</link>
      <pubDate>Thu, 17 May 2012 16:16:47 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2012/20120517/</guid>
      <description>手元のマシンからリモートのAWSのインスタンスへrsync。
rsync -avz -e &#39;ssh -i /foo/bar/zoo.pem&#39; PDFClown-0.1 ec2-user@aws-sandbox:/disk4/backup  </description>
    </item>
    
    <item>
      <title>AWSのインスタンスにディスクをマウント</title>
      <link>https://ymraintree.github.io/blog/post/2012/20120309/</link>
      <pubDate>Fri, 09 Mar 2012 16:17:55 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2012/20120309/</guid>
      <description>マネージメントコンソールでボリュームを作成。インスタンスにアタッチすると、デバイス名(/dev/sdiなど)が表示されるので、インスタンスにログインして、
$ sudo mkfs -t ext3 /dev/sdi $ sudo mount /dev/sdi /disk4  で使えるようになる。</description>
    </item>
    
    <item>
      <title>ScalaのEJBをJavaから参照する</title>
      <link>https://ymraintree.github.io/blog/post/2012/20120123/</link>
      <pubDate>Mon, 23 Jan 2012 16:18:58 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2012/20120123/</guid>
      <description>以前からscalaでEJBを書いていたが、ここへ来て問題発生。JavaとScalaの混在プロジェクトでJavaからScalaのクラスを参照したときにコンパイルエラーにはならないのに、eclipseのエディタ上ではエラーの表示がされてしまう。これを解決するには
Java同様、Scalaのクラスもパッケージと同じ位置に置く。
case class Foo( @(Id @field) x:Int, @(Temporal @field)(value=TemporalType.DATE) @BeanProperty nyukinDate:Date, @(Column @field)(columnDefinition=&amp;quot;numeric(13, 2)&amp;quot;) @BeanProperty var shohizei:Double, @(Column @field)(columnDefinition=&amp;quot;text&amp;quot;, nullable=false) @BeanProperty var userName:String = _ y:String )  をやめて
import scala.annotation.target.field object ScalaAnnotations { type Id = javax.persistence.Id @field type Temporal = javax.persistence.Temporal @field type Column = javax.persistence.Column @field }  を定義し、
import boo.ScalaAnnotations._ case class Foo( @Id x:Int, @Temporal(TemporalType.DATE) @BeanProperty nyukinDate:Date, @Column(columnDefinition=&amp;quot;numeric(13, 2)&amp;quot;) @BeanProperty var shohizei:Double, @Column(columnDefinition=&amp;quot;text&amp;quot;, nullable=false) @BeanProperty var userName:String = _ y:String )  とする。</description>
    </item>
    
    <item>
      <title>galaxy nexus</title>
      <link>https://ymraintree.github.io/blog/post/2012/20120119/</link>
      <pubDate>Thu, 19 Jan 2012 16:20:43 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2012/20120119/</guid>
      <description>なんとなく衝動的にgalaxy nexus購入。ひととおりセットアップを終えて使用開始。日本語入力はFlickWnnがいい感じ。</description>
    </item>
    
    <item>
      <title>AspectJのプラグイン</title>
      <link>https://ymraintree.github.io/blog/post/2012/20120112/</link>
      <pubDate>Thu, 12 Jan 2012 16:21:31 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2012/20120112/</guid>
      <description>久しく使っていないけれど、以前のプロジェクトで使っていたAspectJ。Eclipse 3.7にプラグインをインストール。
http://download.eclipse.org/tools/ajdt/37/update
だとプロジェクトがエラーになってしまうが、
http://download.eclipse.org/tools/ajdt/37/dev/update
ならばOK。</description>
    </item>
    
    <item>
      <title>gmailをSMTPサーバとしてjavaからメールを送信する</title>
      <link>https://ymraintree.github.io/blog/post/2011/20111206/</link>
      <pubDate>Tue, 06 Dec 2011 16:23:06 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20111206/</guid>
      <description>会社のメールサーバをgmailに切り替えたことにともない、システムから出すメールのSMTPサーバもgmailに切り替えました。すると、ときどき以下のエラーでメールが送信されないという現象が起きるようになりました。
2011-12-06 09:23:33,368 FATAL [javax.enterprise.resource.webcontainer.jsf.applic ation org.jboss.web.jsf.integration.config.Log4JConversionFilter.logWithThrowabl e(Log4JConversionFilter.java:109)] java.lang.SecurityException: Access to defaul t session denied javax.faces.el.EvaluationException: java.lang.SecurityException: Access to defau lt session denied  いったんこれが出るとサーバ(Jboss)を再起動しない限りメールは送信されません。ちょっと調べたら、Session session = Session.getDefaultInstanceをSession session = Session.getInstanceに変えるべしという情報があったので変えてみました。効果はしばらく様子を見ないとわからないんですが。
参考URL: http://www.java.net/node/697528</description>
    </item>
    
    <item>
      <title>EJB-QLのチューニング</title>
      <link>https://ymraintree.github.io/blog/post/2011/20111202/</link>
      <pubDate>Fri, 02 Dec 2011 16:24:27 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20111202/</guid>
      <description>EJBをDBから取り出すときにSQLに似たEJB-QLを使うわけですが、
@NamedQuery(name=&amp;quot;torihiki.findForReport&amp;quot;, query=&amp;quot;select torihiki from Torihiki torihiki &amp;quot; + &amp;quot;left outer join fetch torihiki.torihikiMeisais torihikiMeisai &amp;quot; + &amp;quot;where torihiki.nohinDate = :nohinDate&amp;quot;)  のような書き方をします。これが遅いといわれ、チューニングしたりしたんですが、効果が出ず。結局、left outerをやめてただのjoinにしたらてきめん速くなりました。joinの使い方を勉強しなおさなければ。</description>
    </item>
    
    <item>
      <title>Entity BeanでCREATE INDEXする</title>
      <link>https://ymraintree.github.io/blog/post/2011/20111114/</link>
      <pubDate>Mon, 14 Nov 2011 16:25:18 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20111114/</guid>
      <description>アプリケーションのチューニングをして、DBにインデックスを張りたいとき、SQLを直に実行してしまうと移植時などに忘れてしまうことがあるので、Entity Bean内に書いておきたい。調べると、
@Table(indexes = {@Index(name=&amp;quot;customer_idx&amp;quot;, columnNames = {&amp;quot;customerCd&amp;quot;, &amp;quot;customerKbnCd&amp;quot;}), @Index(name=&amp;quot;customer_idx2&amp;quot;, columnNames = {&amp;quot;seikyuDate&amp;quot;})}, appliesTo = &amp;quot;customer&amp;quot;)  などと書ける。しかしいくらデプロイしてもインデックスがcreateされない。persistence.xmlの
&amp;lt;property name=&amp;quot;hibernate.hbm2ddl.auto&amp;quot;&amp;gt;update&amp;lt;/property&amp;gt;  を
&amp;lt;property name=&amp;quot;hibernate.hbm2ddl.auto&amp;quot;&amp;gt;create&amp;lt;/property&amp;gt;  にするとインデックスが作られるが、テーブルごと作り直されてしまうため、データがなくなってしまう。うーむ。</description>
    </item>
    
    <item>
      <title>jbossのtransaction timeoutの制御</title>
      <link>https://ymraintree.github.io/blog/post/2011/20111017/</link>
      <pubDate>Mon, 17 Oct 2011 16:26:28 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20111017/</guid>
      <description>jbossで大きなバッチ処理などするとtimeoutで落ちてしまうことがある。このようなとき、そのメソッドだけtimeout値を変更するには、以下のアノテーションをメソッドに付ける
@TransactionTimeout(1500)  参照URL: http://community.jboss.org/wiki/TransactionTimeout</description>
    </item>
    
    <item>
      <title>linuxサーバでpdfファイルの印刷</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110930/</link>
      <pubDate>Fri, 30 Sep 2011 16:27:20 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110930/</guid>
      <description>linuxサーバ上のjbossでpdfファイルを生成し印刷する必要が生じました。pdfはjasperReportなどで生成できますが、これを普通にlprとかしても日本語が出ません。jasperReport側でフォントの設定などをいろいろと変えてみたが解決せず。
サーバにacrobat readerを入れるという方法をためしてみました。
linuxサーバは64bitでacrobat readerは32bit版しか提供されていません。なので、AdbeRdr9.4.2-1_i486linux_jpn.tar.bz2をダウンロード、解凍し、
# cd AdobeReader # ./INSTALL  としてインストール。
acroread -toPostScript -pairs foo.pdf foo.ps; lpr -P myprinter foo.ps  とすると印刷できました。ただしASCIIのフォントがちょっと変。
なお、linux上のacroreadはrootで実行するとエラーになってしまうので、別人になって実行する必要がある。scalaではこんな感じ。
val cmd = Array(&amp;quot;su&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;nobody&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;acroread -toPostScript -pairs foo.pdf foo.ps; lpr -P myprinter foo.ps&amp;quot;) val p = Process(cmd).run if (p.exitValue != 0) { println(&amp;quot;異常終了 &amp;quot; + p.toString()) }  </description>
    </item>
    
    <item>
      <title>drbdの再同期</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110929/</link>
      <pubDate>Thu, 29 Sep 2011 16:31:58 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110929/</guid>
      <description>drbdのフェイルオーバのテストなどをしていると、
$ cat /proc/drbd version: 8.3.9 (api:88/proto:86-95) srcversion: CF228D42875CF3A43F2945A 0: cs:StandAlone ro:Secondary/Unknown ds:Inconsistent/DUnknown r----- ns:0 nr:0 dw:0 dr:0 al:0 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:976531312 $  のような状態になる。これはプライマリとセカンダリが同期していない状態。こういう場合の再同期の処理。
セカンダリ側
$ sudo drbdadm down r0 $ sudo drbdadm up r0 $ sudo drbdadm invalidate r0 $ cat /proc/drbd version: 8.3.9 (api:88/proto:86-95) srcversion: CF228D42875CF3A43F2945A 0: cs:WFConnection ro:Secondary/Unknown ds:Inconsistent/DUnknown C r----s ns:0 nr:0 dw:0 dr:0 al:0 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:976531312 $  プライマリ側</description>
    </item>
    
    <item>
      <title>drbdマシンの起動時の処理</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110927/</link>
      <pubDate>Tue, 27 Sep 2011 16:33:01 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110927/</guid>
      <description>drbdのマシンを再起動したときに、以下の処理をしないと正常に起動しない。
ログイン
drbd-overviewで確認 sudo drbdadm down r0 sudo drbdadm up r0 sudo drbdadm primary r0 (sudo drbdsetup (0 or /dev/drbd0) primary でも可) drbd-overviewで確認 sudo mount /drbd  </description>
    </item>
    
    <item>
      <title>drbd</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110926/</link>
      <pubDate>Mon, 26 Sep 2011 16:34:30 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110926/</guid>
      <description>2台のlinuxマシンを使ってdrbd環境構築。drbd用のパーティションとして1TBを取ってしまったので初期同期に一週間くらいかかってしまった。このパーティションで実用していいんだろうか。
障害時の切り替え手順
現プライマリ側
sudo umount /drbd sudo drbdsetup /dev/drbd0 secondary  新プライマリ側
sudo drbdsetup /dev/drbd0 primary sudo mount /dev/drbd0 /drbd  どちらもcat /proc/drbdなどして確認。drbd-overviewだと
0:??not-found?? Connected Primary/Secondary UpToDate/UpToDate C r----- /drbd\ ext4 917G 665M 870G 1%  となる。not-foundってなんだろう。</description>
    </item>
    
    <item>
      <title>solr</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110831/</link>
      <pubDate>Wed, 31 Aug 2011 16:35:34 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110831/</guid>
      <description>solrを使ってみる。解凍して、
$ cd apache-solr-3.3.0/ $ cd example/ $ java -jar start.jar  で起動。PDFを読み込ませたいときは
$ curl &amp;quot;http://localhost:8983/solr/update/extract?literal.id=doc1&amp;amp;commit=true&amp;quot; -F &amp;quot;myfile=@XXXXXXX.pdf&amp;quot;  などとする。データの削除は
$ sudo java -Ddata=args -jar exampledocs/post.jar &amp;quot;&amp;lt;delete&amp;gt;&amp;lt;id&amp;gt;vvvvvv&amp;lt;/id&amp;gt;&amp;lt;/delete&amp;gt;&amp;quot;  とか
$ sudo java -Ddata=args -jar exampledocs/post.jar &amp;quot;&amp;lt;delete&amp;gt;&amp;lt;query&amp;gt;kkkkkk:vvvvvv&amp;lt;/query&amp;gt;&amp;lt;/delete&amp;gt;&amp;quot;  </description>
    </item>
    
    <item>
      <title>findの-execで複数のコマンドを実行する</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110830/</link>
      <pubDate>Tue, 30 Aug 2011 16:36:46 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110830/</guid>
      <description>eclipseのプロジェクトのエンコーディングをまちがえてMS932で結構なファイル数のコードを書いてしまった。これを一気にUTF-8に変換したい。まずは以下のシェルスクリプトを作成
echo $1 nkf -w $1 &amp;gt; /tmp/foo mv /tmp/foo $1  これをfindで実行。
$ find . -type f -exec sh z:/foo.sh {} \;  </description>
    </item>
    
    <item>
      <title>play&#43;scala&#43;morphia</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110829/</link>
      <pubDate>Mon, 29 Aug 2011 16:39:14 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110829/</guid>
      <description>$ ./play install morphia $ ./play new myapp --with scala  myapp/conf/dependencies.ymlに以下の行を追加する。
- play -&amp;gt; morphia 1.2.2beta1  </description>
    </item>
    
    <item>
      <title>play&#43;scala&#43;mongo</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110828/</link>
      <pubDate>Sun, 28 Aug 2011 16:40:53 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110828/</guid>
      <description>$ ./play install mongo $ ./play new myapp --with scala mongo  myapp/conf/application.confに以下を追加
# The mongo module module.mongo=${play.path}/modules/mongo # mongodb connection details mongo.host=localhost mongo.port=27017 mongo.database=play mongo.username=test mongo.password=test123  $ ./play run myapp  以下のエラー。
~ Oops, ~ Module not found: /net/ares/disk1/home/yano/project/play-1.2.2/modules/mongo  myapp/conf/application.confの
module.mongo=${play.path}/modules/mongo  を
module.mongo=${play.path}/modules/mongo-1.3  に変更したら動いた。</description>
    </item>
    
    <item>
      <title>caseクラスでパラメータにアノテーション　続き</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110819/</link>
      <pubDate>Fri, 19 Aug 2011 16:46:57 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110819/</guid>
      <description>前回caseクラスでパラメータにアノテーションを書いても効かなかったと書きましたが、正確にはjavaのアノテーションは効かないということでした。
case class Shohin ( @BeanProperty pk:String  これは効くけれど、
case class Shohin ( @Column columnDefinition=&amp;quot;text&amp;quot;) pk:String  これは効かない。これが効かないのはしょうがないとしても、
case class Shohin ( @Id pk:String  これが効かないと、EJBコンテナにデプロイしたときにエラーになってしまうので、致命的。それでcaseクラスを諦めていたわけですが、
http://www.davidgreco.it/MySite/Blog/Entries/2011/2/16_Scala_and_JPA__a_couple_of_hints.html
に解決方法がありました。
import scala.annotation.target._ case class Shohin ( @(Id @field) @(Column @field)(columnDefinition=&amp;quot;text&amp;quot;) pk:String  とするということです。なにはともあれ、エンティティビーンにcaseクラスが使えるようになったのは、とてもうれしい。</description>
    </item>
    
    <item>
      <title>caseクラスでパラメータにアノテーション</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110817/</link>
      <pubDate>Wed, 17 Aug 2011 16:48:08 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110817/</guid>
      <description>EJBのエンティティビーンをscalaで書こうと、
@Entity @Cache(usage=CacheConcurrencyStrategy.NONE) case class Foo(@Id k:Int, v:String)  としてみたところ、以下のエラー。
Reason: org.hibernate.AnnotationException: No identifier specified for entity: Foo  どうも、@Idアノテーションが効いていない様子。
http://scala-programming-language.1934581.n4.nabble.com/scala-case-classes-and-parameter-annotations-td2002485.html
によると、バグとのこと。</description>
    </item>
    
    <item>
      <title>fessでPDF全文検索</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110802/</link>
      <pubDate>Tue, 02 Aug 2011 16:49:16 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110802/</guid>
      <description>PDFファイルの全文検索がしたいということで、ちょっと調べたらfessというものがあって、solrに検索用のページなどをつけたオールインワンなプロダクトのようで、試しに使ってみました。
fessを動かすサーバ内のディレクトリにPDFファイルを置いておき、そこを指定してfessにクロールさせる、それを検索ページで表示させる、というのが目標。
バージョンはfess-server-4.1.0。インストールはzipを解凍するだけ。bin/startup.shで起動すると
http://xxxxxx.co.jp:8080/fess/admin/
で管理画面に行けます。ここでPDFファイルを置いているディレクトリを指定してクロール開始。しばし待つと、完了する（経過はfess-server-4.1.0/webapps/fess/WEB-INF/logs/fess_crawler.outで見ることができる）。
ここで検索画面http://xxxxxx.co.jp:8080/fess/にアクセスして、てきとうなキーワードで検索する。するとヒットしたPDFファイルが列挙される。
ここまではいいんですが、列挙されたPDFファイルへのリンクをクリックしても画面が白くなってしまい、PDFの内容が表示されませんでした。
いろいろやってみたんですが、うまくいかず、結局fess-server-4.1.0/webapps/fess/js/search.jsの内容を書き換えて、
b.push(&amp;quot;go?rt=&amp;quot;); b.push(a); b.push(&amp;quot;&amp;amp;u=&amp;quot;); b.push(encodeURIComponent(c));  を
b.push(&amp;quot;docs&amp;quot;); var len = c.lastIndexOf(&amp;quot;/&amp;quot;); var file = c.slice(len); b.push(file);  とし、クロールするディレクトリと同様のものをfess-server-4.1.0/webapps/fess/にも置くということで対処。いまいちだけど、とりあえず動きました。</description>
    </item>
    
    <item>
      <title>play&#43;scalaプロジェクトをeclipseにインポートする</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110722/</link>
      <pubDate>Fri, 22 Jul 2011 16:50:30 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110722/</guid>
      <description>play+scalaでちょっとずつ書き始めたので、そろそろeclipseも試そうと思いました。
$ ./play eclipsify xxxxx  してeclipseにインポートしたんですが、scalaのコードにコンパイルエラーが出てしまいました。すでに動いているものなのに。playのeclipsifyでクラスパスもきっちり設定されているのに。気を取り直してよくよく調べるとplay-1.2.1/modules/scala-0.9/libのplay-scala.jarとscalatest-1.2-zzzzzzzzzzzz.jarをインポートしたらコンパイルエラーは出なくなりました。</description>
    </item>
    
    <item>
      <title>mongodb&#43;casbah&#43;scala</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110714/</link>
      <pubDate>Thu, 14 Jul 2011 16:51:30 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110714/</guid>
      <description>遅まきながらmongodbの勉強。sbt-0.10でプロジェクトを作る。
$ mkdir sbt-mongo $ cd sbt-mongo  ここで、build.sbtを作成。内容は以下。
name := &amp;quot;Hello Mongo+Casbah&amp;quot; version := &amp;quot;1.0.0&amp;quot; scalaVersion := &amp;quot;2.9.0&amp;quot; organization := &amp;quot;&amp;quot; libraryDependencies ++= Seq( &amp;quot;com.mongodb.casbah&amp;quot; % &amp;quot;casbah_2.9.0-1&amp;quot; % &amp;quot;2.1.5-1&amp;quot; ) mainClass in(Compile, run) := Some(&amp;quot;mongo.casbah.Sample&amp;quot;)  で、sbt実行
$ sbt  するとproject, targetディレクトリができる。ここで、src/main/scala/mongo.casbah/Sample.scalaを以下のように作成。
package mongo.casbah import com.mongodb.casbah.Imports._ object Sample { def main(args:Array[String]) { val collection = MongoConnection()(&amp;quot;casbah_test&amp;quot;)(&amp;quot;sample&amp;quot;) val user = MongoDBObject(&amp;quot;id&amp;quot;-&amp;gt;1, &amp;quot;name&amp;quot;-&amp;gt;&amp;quot;me&amp;quot;, &amp;quot;address&amp;quot;-&amp;gt;&amp;quot;テスト満載&amp;quot;) println(user) collection += user collection.find().foreach { println(_) } } }  で、sbtプロンプトでrunすると、</description>
    </item>
    
    <item>
      <title>linuxでプリンタ設定</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110713/</link>
      <pubDate>Wed, 13 Jul 2011 16:52:57 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110713/</guid>
      <description>linuxサーバ上でJasperReportを使ってPDFファイルを生成し、プリンタに直接印刷する必要が生じたので、環境を作りました。サーバはubuntuの64bit、プリンタはキャノンLBP8620。
キャノンのサイトを見てみると、linux 64bit用のドライバはrpmでしか提供されていないようす。ubuntuにはrpmコマンドがないので、どうしたものかと調べて、alienコマンドを使うことにしました。まずはalienのインストール。
$ sudo apt-get install alien  キャノンのサイトからダウンロードしたドライバのインストール。
$ sudo alien -i cndrvcups-common_2.20-1.x86_64.rpm $ sudo alien -i cndrvcups-lips4-2.20-1.x86_64.rpm  ここでcupsのリスタート。
$ sudo /etc/init.d/cups restart  プリンタの定義。ppdファイル名はキャノンのサイトを参照しました。
$ sudo lpadmin -p cop -m CNCUPSLBPSERIESLJ.ppd -v lpd://cop.is.magazine.co.jp/cop -E  これで、
$ lpr -P cop XXXXXXXX.pdf  などでlinuxからpdfの印刷ができるようになりましたが、フォントの設定ができてなくて、中途半端に文字化けします。このあたりはひきつづき調査。</description>
    </item>
    
    <item>
      <title>USB3.0 HDD</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110707/</link>
      <pubDate>Thu, 07 Jul 2011 17:00:56 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110707/</guid>
      <description>バックアップ用にUSB3.0の外付けHDDを2本購入。さっそくlinuxにつないで試してみる。4Gのファイルをコピーしてみたら、結果としてはちょっと困った感じになった。
USB3.0外付けその1　2分10秒
USB3.0外付けその2　1分20秒
内蔵HDD　20秒
内蔵SDD　11秒
外付けUSBは時間がかかりすぎではないだろうか。おなじUSB3.0でも2本のHDDで1分以上差がつくのも解せない。ためしに、別のlinuxマシンにつないで運用しているUSB2.0のHDDで同様のことをしたら、2分10秒くらいで、USB3.0外付けその1とほぼ同タイム。どういうことなんだろう。</description>
    </item>
    
    <item>
      <title>scalaスクリプトでおかしな挙動？</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110630/</link>
      <pubDate>Thu, 30 Jun 2011 17:03:13 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110630/</guid>
      <description>たとえば、
object Foo { val ZOO = &amp;quot;xxxx&amp;quot; }  というクラスを作ってコンパイルします。これをスクリプトの中で使います。
println(Foo.ZOO)  これはOK。次に、
object Foo { val ZOO = &amp;quot;xxxx&amp;quot; val ZOO_ADDED = &amp;quot;ZZZZZ&amp;quot; }  と、ZOO_ADDEDを増やします。そして、これをスクリプト中で使います。すると、
script.scala:2: error: value ZOO_ADDED is not a member of object Foo println(Foo.ZOO_ADDED) ^ one error found  と、エラーになってしまいます。同じことをREPLでやるとこちらはエラーになりません。すごく不思議なんですが、scalaのテンポラリディレクトリ（/tmp/scala-devel）を一度削除するとスクリプトも動くようになります。ちょっと気持ちの悪い挙動でした。</description>
    </item>
    
    <item>
      <title>macでemacs</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110629/</link>
      <pubDate>Wed, 29 Jun 2011 17:05:48 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110629/</guid>
      <description>一方macではどうかと、macのcocoa emacsに環境設定。こちらのほうは素直になにもかも動いた。</description>
    </item>
    
    <item>
      <title>windowsでemacs</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110629-2/</link>
      <pubDate>Wed, 29 Jun 2011 15:06:33 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110629-2/</guid>
      <description>今までは、windows用のXサーバを使って、リモートのlinuxのemacsをwindows上で開いて使っていたが、どうも最近よく落ちる。そこで、windows上で動くemacsを試してみた。emacsを使うには
 日本語入出力 trampでリモートファイル編集 sshでファイル名補完  ができるのが大前提。ざっと調べてgnupackを入れてみた。日本語は問題なし。
trampはdefault methodをpscpにして正常動作を確認。ところが、開けるファイルと開けないファイルがある。開けないときは
File exists, but cannot be read  というメッセージ。開けるファイルと見比べても違いがわからず、小1時間。結局ファイルサイズに上限があるようで、tramp copy size limitをデフォルトの10240から10240000に変更。これをnilにすると上限なしになるみたいだけど、効かなかった。
sshは、リモートホストにアクセスすると、
Pseudo-terminal will not be allocated because stdin is not a terminal.  というメッセージが出る。プロンプトは表示されないが、lsなどが効く。しかしこれでは気持ち悪いのでいろいろやったら、どうも2回目のアクセスは正常に動く。1回目だけを犠牲にすればいいだけだから、まあいいか。裏でtrampが走ってファイル名補完も動作。しかし、sshするときに、いまアクティブになっているバッファが影響するようで、ssh-taro@hogeのバッファがアクティブな状態でhanako@booにアクセスしようとすると、taro@booのパスワードを要求されたりする。この辺はちょっと問題。ほかには
trampの最初のアクセスで補完が効かない 設定ファイルがgnupack-xxxx/{config.ini, home/.emacs}とかにあって、別の場所に移したい
など</description>
    </item>
    
    <item>
      <title>java, scalaでOSコマンド実行</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110628/</link>
      <pubDate>Tue, 28 Jun 2011 17:08:45 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110628/</guid>
      <description>Runtime	rt = Runtime.getRuntime(); Process p = rt.exec(&amp;quot;cp -p foo.txt foo.txt.BACKUP&amp;quot;); p.waitFor();  など。|や&amp;gt;を使いたいときは、
String cmd = &amp;quot;diff foo.txt foo.txt.BACKUP &amp;gt; foo.txt.diff&amp;quot;; String[] cmdArray = {&amp;quot;/bin/sh&amp;quot;, &amp;quot;-c&amp;quot;, cmd}; Runtime	rt = Runtime.getRuntime(); Process p = rt.exec(cmdArray);  というぐあいにArrayにする。
ちなみにscalaだとこんな感じ。
val cmdBody = &amp;quot;diff foo.txt foo.txt.BACKUP &amp;gt; foo.txt.diff&amp;quot; val cmd = Array(&amp;quot;su&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;nobody&amp;quot;, &amp;quot;-c&amp;quot;, cmdBody) val p = Process(cmd).run if (p.exitValue != 0) { p.toString() println(&amp;quot;異常終了 &amp;quot; + p.toString()) }  </description>
    </item>
    
    <item>
      <title>scalaでスクリプトを書く</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110623/</link>
      <pubDate>Thu, 23 Jun 2011 17:09:45 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110623/</guid>
      <description>perlとかで書いていたスクリプトをscalaで書こうとすると、クラスパスなどの環境変数を定義してからscalaスクリプトを起動するような起動ファイルが別にいるんだと、昔のCOBOLとJCLみたいでかっこわるいなと思っていたら、解決することができた。scalaスクリプト冒頭に
#! /bin/bash cp=&amp;quot;/usr/local/share/commons-logging.jar&amp;quot; export JAVA_OPTS=&amp;quot;-server -Xms1024m -Dcluster=localhost:1100&amp;quot; exec scala -classpath $cp $0 $@ !# println(&amp;quot;Hello, Scala!&amp;quot;)  とするとひとつのファイルで環境設定とscalaスクリプトの実行ができる。また、外部からの引数はargs:Array[String]に入って渡ってくるので、そのまま使えばＯＫ。</description>
    </item>
    
    <item>
      <title>ubuntuのcron環境</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110620/</link>
      <pubDate>Mon, 20 Jun 2011 17:10:48 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110620/</guid>
      <description>今までRedHatで動いていたcronのジョブをubuntuに移植したところ、sourceコマンドがない、というエラーが出るようになった。なぜかubuntuのcronはbashではなく、shで動いているもよう。crontab -eでcronの編集画面を開いて、
SHELL=/bin/bash  を加えるとbashで動くようになった。
さらに、cronから出るメールが文字化け。ヘッダをみると、
Content-type: text/plain; charset=ANSI_X3.4-1968  となっていたので、上記のようにcrontab -eで
CONTENT_TYPE=text/plain; utf-8  を追加して解決。</description>
    </item>
    
    <item>
      <title>ubuntuのインストール</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110609/</link>
      <pubDate>Thu, 09 Jun 2011 17:11:47 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110609/</guid>
      <description>ひさしぶりのlinuxインストール。マシンはSSDを搭載しているので、SSDにインストールしたところ、最後にgrubの書き込みに失敗とのメッセージ。windowsに戻してデュアルブートにしたり、super grub diskを使ってみたり、いろいろしましたが、インストール時にブートローダのインストール場所を指定するところで、/dev/sdaとしていたのがいけなかったようで。/dev/mapper/xxxxx (striped)を指定したらすっと入りました。SSDだからとかは関係なかった。そのほか気がついたこと。
64bitインストーラは日本のサイトでは見つけられなかった。ubuntu.comからダウンロード。ファイル名にamdとあるが気にしない
当然のことながらCDに焼くよりusbメモリのほうが速い。インストールも速い。
usbにインストーラを入れるときはnetbootinというツールを使用</description>
    </item>
    
    <item>
      <title>portからbrewへ</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110608/</link>
      <pubDate>Wed, 08 Jun 2011 17:12:31 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110608/</guid>
      <description>MacBook Airでportを使っていましたが、scala29をインストールするとエラーが発生。ライブラリがないとかいってきましたが、これを機会にbrewに乗り換えました。
$ cd /usr $ sudo mkdir local $ sudo chown xxxx local $ cd local $ ruby -e &amp;quot;$(curl -fsSL https://raw.github.com/gist/323731/39fc1416e34b9f6db201b4a026181f4ceb7cfa74)&amp;quot;  で、brew install scala, brew install sbtなど。インストールすると、/usr/local/Cellarというディレクトリにもろもろ入るようです。
あとは、~/.bash_profileで/usr/local/binへのパスを張っときます。これで、play + scala環境がMacにできたと。やっぱり手元がunixだとなにかと便利、な気がします。</description>
    </item>
    
    <item>
      <title>play &#43; scala</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110607/</link>
      <pubDate>Tue, 07 Jun 2011 17:13:19 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110607/</guid>
      <description>playにscalaをインストールする
$ play install scala  プロジェクトを作る
$ play new sampleappscala --with scala  実行
$ play run sampleappscala  </description>
    </item>
    
    <item>
      <title>scala &#43; google app engineでのエラー回避</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110422/</link>
      <pubDate>Fri, 22 Apr 2011 17:14:16 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110422/</guid>
      <description>eclipseでscalaを使ってgoogle app engineのプロジェクトを作りビルドすると
scala org.datanucleus.metadata.MetaDataManager loadClasses  的なエラーが出る。これを回避するには.projectのdatanucleusあたりをコメントアウト。</description>
    </item>
    
    <item>
      <title>eclipseでandroid&#43;scalaプロジェクトを作る手順</title>
      <link>https://ymraintree.github.io/blog/post/2011/20110420/</link>
      <pubDate>Wed, 20 Apr 2011 17:15:16 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2011/20110420/</guid>
      <description>./create_project crashball org.crashball --platform android-7 --scala-version 2.8.1  でプロジェクトを作成。
eclipseでプロジェクトを作成。こちらはscalaプロジェクト。
create_projectで作ったディレクトリからproject, src/*, testsをeclipseプロジェクトへ移動。
sbt update  eclipseでソースフォルダの設定
src/main/java src/main/scala src/test/scala  クラスパスの設定。android-sdkから適当なバージョンのandroid.jarを追加。プロジェクト内のlib_managed/scala_2.8.1/test/scalatest-1.2.jarも追加。
これでできあがり。あとはsbtでcompileなり、start-emulator, start-deviceなり。</description>
    </item>
    
    <item>
      <title>映画『バレンタインデー』</title>
      <link>https://ymraintree.github.io/blog/post/2010/20100830/</link>
      <pubDate>Mon, 30 Aug 2010 17:16:29 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2010/20100830/</guid>
      <description>ITには関係ないけれど、休日のリフレッシュのために映画「バレンタインデー」を観ました。いろいろ詰め込み過ぎなのか、ユーモアの部分とシリアスの部分の振れ幅が小さいなど、編集がちょっと甘かったりしましたが、そこそこおもしろかったです。似たような作品では「ラブ・アクチュアリー」のほうが出来は上だったかな。中にはいいセリフもありました。「愛するということは、相手の好きなところ、いいところを愛するだけでなく、悪いところ、嫌なところも丸ごと愛するということだ」みたいなことをシャーリー・マクレーンがいっていました。いかんせん、このシーンの彼女の衣装がなんかフワフワしてて、いいセリフがずしーんとこないんですよねえ。</description>
    </item>
    
    <item>
      <title>scalaでJavaのインナークラスを扱う</title>
      <link>https://ymraintree.github.io/blog/post/2010/20100729/</link>
      <pubDate>Thu, 29 Jul 2010 17:19:06 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2010/20100729/</guid>
      <description>scalaでJavaのインナークラスを使う場面に、apache pivotをさわっているとき出くわしました。
import org.apache.pivot.wtk.Component  して
var style:Component#StyleDictionary = label.getStyles()  とする。#を使うんですねえ。</description>
    </item>
    
    <item>
      <title>scala-2.8でEJB</title>
      <link>https://ymraintree.github.io/blog/post/2010/20100720/</link>
      <pubDate>Tue, 20 Jul 2010 17:20:04 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/2010/20100720/</guid>
      <description>scala-2.8が先週リリースされたので、eclipseプラグインもアップデートしてみました。既存のEJBが
@GeneratedValue(strategy=GenerationType.AUTO)  の行でannotation needs to be a constantというメッセージでエラーになりました。
コマンドラインでscalacするとコンパイルできるようなので、eclipseプラグインの問題のようです。移行はもうちょっと待ってみよう。</description>
    </item>
    
  </channel>
</rss>