<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>コードの波にゆ～らゆら</title>
    <link>https://ymraintree.github.io/blog/</link>
    <description>Recent content on コードの波にゆ～らゆら</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Mar 2019 12:30:00 +0900</lastBuildDate>
    
	<atom:link href="https://ymraintree.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>『月の満ち欠け』佐藤正午</title>
      <link>https://ymraintree.github.io/blog/post/20190331-3/</link>
      <pubDate>Sun, 31 Mar 2019 12:30:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20190331-3/</guid>
      <description>&lt;p&gt;突然ですが、ここで書籍のおはなし。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>次はカテゴリとかタグかな</title>
      <link>https://ymraintree.github.io/blog/post/20190331-2/</link>
      <pubDate>Sun, 31 Mar 2019 01:40:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20190331-2/</guid>
      <description>TODO: やっぱりカテゴリとかタグとか必要ですよね。</description>
    </item>
    
    <item>
      <title>CircleCI --&gt; Slackへの通知</title>
      <link>https://ymraintree.github.io/blog/post/20190330-3/</link>
      <pubDate>Sun, 31 Mar 2019 00:44:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20190330-3/</guid>
      <description>こちらのページを参考に、サクッとSlack連携。ありがとうございました。</description>
    </item>
    
    <item>
      <title>テスト</title>
      <link>https://ymraintree.github.io/blog/post/20190331/</link>
      <pubDate>Sun, 31 Mar 2019 00:14:13 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20190331/</guid>
      <description>githubで直接書いてもいいのね。プレビューもできるし。</description>
    </item>
    
    <item>
      <title>BOSE SoundSport Free購入</title>
      <link>https://ymraintree.github.io/blog/post/20190330-2/</link>
      <pubDate>Sat, 30 Mar 2019 17:09:13 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20190330-2/</guid>
      <description>いつもBOSEのQuiet Comfort 35 IIを使っているが、Amazonで安かった＆LINE PAYで20％オフということで、SoundSport Freeも購入。自宅で使っている限り、とても快適。これでリモートの打ち合わせももっと楽になるかも。</description>
    </item>
    
    <item>
      <title>CircleCI</title>
      <link>https://ymraintree.github.io/blog/post/20190330/</link>
      <pubDate>Sat, 30 Mar 2019 09:48:11 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20190330/</guid>
      <description>このブログをCircleCIで自動化。しかし、config.ymlを変更したりしてもCircleCIが走ってしまうのはどうすればいいのか。commit -m &#39;[ci skip]&#39;しても走ってしまう。ちょっと気持ち悪い。
そうか、CI/CDされたくなければgithub上で直接編集すればいいのか。ローカルでテストできるものでもないし。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ymraintree.github.io/blog/post/template/</link>
      <pubDate>Sat, 30 Mar 2019 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/template/</guid>
      <description></description>
    </item>
    
    <item>
      <title>github pages&#43;hugoでblog その３ CircleCI</title>
      <link>https://ymraintree.github.io/blog/post/20190329-3/</link>
      <pubDate>Fri, 29 Mar 2019 23:57:35 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20190329-3/</guid>
      <description>&lt;p&gt;ついでなので、CircleCIでビルド＆公開の設定。どうやら、.circleci/config.ymlにgithubに変化があったときに何をするかを定義していくらしい。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>github pages&#43;hugoでblog その２</title>
      <link>https://ymraintree.github.io/blog/post/20190329-2/</link>
      <pubDate>Fri, 29 Mar 2019 10:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20190329-2/</guid>
      <description>&lt;p&gt;前回は公開用とコンテンツ作成用でリポジトリをふたつに分けたが、やっぱりリポジトリはひとつのほうがシンプルでいいので、その方式で再作成。githubのリポジトリはblogとする。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>github pages&#43;hugoでblog</title>
      <link>https://ymraintree.github.io/blog/post/20190329/</link>
      <pubDate>Fri, 29 Mar 2019 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20190329/</guid>
      <description>&lt;p&gt;github.comにリポジトリを作成しておく。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;　　　&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ymraintree.github.io&lt;/td&gt;
&lt;td&gt;公開コンテンツ用&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ymraintree.github.io.hugo&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;hugoでのコンテンツ作成用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ブログ開始</title>
      <link>https://ymraintree.github.io/blog/post/20190328/</link>
      <pubDate>Thu, 28 Mar 2019 13:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20190328/</guid>
      <description>古いブログ(http://d.hatena.ne.jp/ymraintree/)から引っ越しました。</description>
    </item>
    
    <item>
      <title>Mac keyhacでキーバインドの変更</title>
      <link>https://ymraintree.github.io/blog/post/20190111/</link>
      <pubDate>Fri, 11 Jan 2019 17:09:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20190111/</guid>
      <description>MacBookProを使っているが、つくづく、コントロールキーとコマンドキーが統合されていればいいのにと思う。Ctrl-aとCmd-aを使い分けるシーンなんてないし。
しばらく前からKeyHacを使って、アプリケーションごとにコントロールキーとコマンドキーの入れ替えをしているが、ちょっとスマートに書けるようになった。
changeKey(keymap.defineWindowKeymap(app_name=&amp;quot;com.google.Chrome&amp;quot;)) changeKey(keymap.defineWindowKeymap(app_name=&amp;quot;com.apple.Preview&amp;quot;)) def changeKey(keymap): keymap[&amp;quot;Ctrl-a&amp;quot;] = &amp;quot;Cmd-a&amp;quot; keymap[&amp;quot;Ctrl-c&amp;quot;] = &amp;quot;Cmd-c&amp;quot; keymap[&amp;quot;Ctrl-d&amp;quot;] = &amp;quot;Cmd-d&amp;quot;  </description>
    </item>
    
    <item>
      <title>Emacsのansi-term</title>
      <link>https://ymraintree.github.io/blog/post/20180917/</link>
      <pubDate>Mon, 17 Sep 2018 17:09:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20180917/</guid>
      <description>いままで、/etc/passwdなどを編集するときはmacのターミナルを起動してそこでviしていたが、普段使っているemacsでM-x ansi-termすると、この中でviを使うことができる。これでターミナル不要になった。ありがたい。</description>
    </item>
    
    <item>
      <title>起業</title>
      <link>https://ymraintree.github.io/blog/post/20180816/</link>
      <pubDate>Thu, 16 Aug 2018 17:09:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20180816/</guid>
      <description>7月末に無事、起業。時間はあったのに、あまり準備をせず、そろそろしなきゃとなったら結果、開業freeeのいうがまま。それでもさっくり起業できた。これから銀行の法人口座を作る。楽天銀行かジャパンネットバンクかという感じだけど、楽天のほうが必要書類が少なくてよさそう。</description>
    </item>
    
    <item>
      <title>Datastoreをcsvでエクスポート</title>
      <link>https://ymraintree.github.io/blog/post/20180512/</link>
      <pubDate>Sat, 12 May 2018 17:09:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20180512/</guid>
      <description>Google App Engineでよく使うDatastoreのデータをディープラーニングで使うためにcsvにしようとした。簡単なことと思ったら以外になかなかできず、結局以下の方法で実現できた。
Datastoreのバックアップ BigQueryにインポート 必要なカラムをselectして、Download as csvをクリック
RDBならcopyコマンドとかで一発なんだけど。簡単なことなんだけど。</description>
    </item>
    
    <item>
      <title>Pythonの日時表示</title>
      <link>https://ymraintree.github.io/blog/post/20180305/</link>
      <pubDate>Mon, 05 Mar 2018 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20180305/</guid>
      <description>日本の日時を表示するには、
import time import os os.environ[&#39;TZ&#39;] = &#39;Japan&#39; time.tzset() time.strftime(&#39;%Y/%m/%d %H:%M:%S %Z&#39;)  とすると 2018/03/05 17:24:54 JST となる。もうちょっといい方法はないかな。</description>
    </item>
    
    <item>
      <title>AWS linuxのディスクを拡張する</title>
      <link>https://ymraintree.github.io/blog/post/20180118/</link>
      <pubDate>Thu, 18 Jan 2018 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20180118/</guid>
      <description>AWSコンソールで当該EBSのサイズを拡張する。 ボリュームの状態が、しばらくすると「in-use - completed (100%)」となる。
$ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 10G 0 disk └─xvda1 202:1 0 8G 0 part / $ df -h /dev/xvda1 7.8G 7.6G 0 100% /  変わっていない。
$ sudo growpart /dev/xvda 1 CHANGED: partition=1 start=16065 old: size=16761118 end=16777183 new: size=20955422,end=20971487 $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 10G 0 disk └─xvda1 202:1 0 10G 0 part / $ sudo resize2fs /dev/xvda1 resize2fs 1.</description>
    </item>
    
    <item>
      <title>国民年金・失業保険</title>
      <link>https://ymraintree.github.io/blog/post/20180115/</link>
      <pubDate>Mon, 15 Jan 2018 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20180115/</guid>
      <description>思うところあって、2017年末に25年以上勤めた会社を早期退職した。これからどうするかなど、たいしたプランもないなかで、とりあえず必要なことをしていく。
まずは、厚生年金を国民年金にスイッチ。このまま受給日まで国民年金で行った場合、厚生年金と合わせた受給額はいくらになるのかなどは、年金事務所に問い合わせろとのこと。市役所は手続きのみらしい。
つづいてハローワークで失業保険受給の手続き。職業安定所といったら、昔は仕事にあぶれたおじさんたちが肩寄せあってタバコを吸いながらしみったれた話しをしているところ、というイメージだったけど、今はすっかりクリーンになっていて、通っても気持ちが暗くなるということもなさそうで安心した。今の労働市場はどうなっているのか、考えてもいなかったような仕事や環境に出会えるのではないかと、期待も芽生えてきた。
これからどうなっていくのか、随時メモをつけていきたい。あいまにPythonやkotlinの勉強をしようと思う。</description>
    </item>
    
    <item>
      <title>My First Lambda</title>
      <link>https://ymraintree.github.io/blog/post/20171008/</link>
      <pubDate>Sun, 08 Oct 2017 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20171008/</guid>
      <description>def checkio(data): return filter(lambda x: 1 &amp;lt; data.count(x), data) if __name__ == &amp;quot;__main__&amp;quot;: #These &amp;quot;asserts&amp;quot; using only for self-checking and not necessary for auto-testing assert list(checkio([1, 2, 3, 1, 3])) == [1, 3, 1, 3], &amp;quot;1st example&amp;quot; assert list(checkio([1, 2, 3, 4, 5])) == [], &amp;quot;2nd example&amp;quot; assert list(checkio([5, 5, 5, 5, 5])) == [5, 5, 5, 5, 5], &amp;quot;3rd example&amp;quot; assert list(checkio([10, 9, 10, 10, 9, 8])) == [10, 9, 10, 10, 9], &amp;quot;4th example&amp;quot;  </description>
    </item>
    
    <item>
      <title>psqlのデリミタを変更する</title>
      <link>https://ymraintree.github.io/blog/post/20170424/</link>
      <pubDate>Mon, 24 Apr 2017 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20170424/</guid>
      <description>$ psql -A -F $&#39;\t&#39; xxxxxx  で出力のデリミタをタブに変更できる。</description>
    </item>
    
    <item>
      <title>EC2 インスタンスのタイムゾーンを変更する</title>
      <link>https://ymraintree.github.io/blog/post/20170214/</link>
      <pubDate>Tue, 14 Feb 2017 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20170214/</guid>
      <description>EC2のLinuxインスタンスは作りたてだとタイムゾーンがJSTではないので、これを変更
$ sudo mv localtime localtime.20170204 $ sudo ln -s /usr/share/zoneinfo/Asia/Tokyo localtime $ date Sat Feb 4 14:48:14 JST 2017 $  </description>
    </item>
    
    <item>
      <title>クローンしたVMのファイル名を変更する</title>
      <link>https://ymraintree.github.io/blog/post/20170116/</link>
      <pubDate>Mon, 16 Jan 2017 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20170116/</guid>
      <description>vmwareのVMをクローンすると、.vmdkファイルの名称が変更されてしまう。たとえば、backupVMというVMをクローンすると、
# ls backupVM_2-ctk.vmdk backupVM.nvram backupVM.vmsd backupVM.vmxf backupVM_2-flat.vmdk backupVM_2.vmdk backupVM.vmx vmware.log #  となる。これはスクリプトなどで.vmdkファイルを操作するのに都合が悪いので、元のbackupVM.vmdkのように直したい。これをmvなどしてしまうと構成が壊れて動かなくなるようなので、
# vmkfstools -E backupVM_2.vmdk backupVM.vmdk  とすると、すべての_2が取れる。
# ls backupVM-ctk.vmdk backupVM.nvram backupVM.vmsd backupVM.vmxf backupVM-flat.vmdk backupVM.vmdk backupVM.vmx vmware.log #  さらに、backupVM.vmxの内容にbackupVM_2が残っているので、これを修正する必要がある。</description>
    </item>
    
    <item>
      <title>keyhac</title>
      <link>https://ymraintree.github.io/blog/post/20161222/</link>
      <pubDate>Thu, 22 Dec 2016 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20161222/</guid>
      <description>Macをsierraにアップグレードしたらkarabinerが使えなくなったので、かわりにkeyhacを試してみる。
keyhacはkarabinerとちがって、コントロールキーとコマンドキーを交換という定義ができず、常に
keymap[&amp;quot;Ctrl-a&amp;quot;] = &amp;quot;Cmd-a&amp;quot;  というふうにメインキーとの組み合わせで定義しなければならないもよう。これは非常の多くの組み合わせがあり、かつ複数のアプリケーションで定義したいので、いちいち全部をconfig.pyに書くのはつらい。そこでメソッド化。
def changeKey(keymap): keymap[&amp;quot;Ctrl-a&amp;quot;] = &amp;quot;Cmd-a&amp;quot; keymap[&amp;quot;Ctrl-c&amp;quot;] = &amp;quot;Cmd-c&amp;quot; keymap[&amp;quot;Ctrl-d&amp;quot;] = &amp;quot;Cmd-d&amp;quot; keymap[&amp;quot;Ctrl-f&amp;quot;] = &amp;quot;Cmd-f&amp;quot; keymap[&amp;quot;Ctrl-p&amp;quot;] = &amp;quot;Cmd-p&amp;quot; keymap[&amp;quot;Ctrl-q&amp;quot;] = &amp;quot;Cmd-q&amp;quot; keymap[&amp;quot;Ctrl-r&amp;quot;] = &amp;quot;Cmd-r&amp;quot; keymap[&amp;quot;Ctrl-s&amp;quot;] = &amp;quot;Cmd-s&amp;quot; keymap[&amp;quot;Ctrl-t&amp;quot;] = &amp;quot;Cmd-t&amp;quot; keymap[&amp;quot;Ctrl-v&amp;quot;] = &amp;quot;Cmd-v&amp;quot; keymap[&amp;quot;Ctrl-w&amp;quot;] = &amp;quot;Cmd-w&amp;quot; keymap[&amp;quot;Ctrl-x&amp;quot;] = &amp;quot;Cmd-x&amp;quot; keymap[&amp;quot;Ctrl-z&amp;quot;] = &amp;quot;Cmd-z&amp;quot; return keymap  を作り、
 keymap_chrome = keymap.defineWindowKeymap(app_name=&amp;quot;com.google.Chrome&amp;quot;) keymap_chrome = changeKey(keymap_chrome)  で呼び出すようにする。</description>
    </item>
    
    <item>
      <title>sshセッションのタイムアウトを防止する</title>
      <link>https://ymraintree.github.io/blog/post/20161216/</link>
      <pubDate>Fri, 16 Dec 2016 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20161216/</guid>
      <description>最近AWSを使うことが多くなって、EC2のインスタンスにsshで接続して作業するが、なにかというとタイムアウトするので不便。ちょっと調べたら
サーバの/etc/ssh/sshd_configに
ClientAliveInterval 60  を設定する
~/.ssh/configに
ServerAliveInterval 60  を設定する
のいずれかでタイムアウトしなくなるらしい。</description>
    </item>
    
    <item>
      <title>EntityManager#createNativeQueryで一部のデータを取り出すとき</title>
      <link>https://ymraintree.github.io/blog/post/20160204/</link>
      <pubDate>Thu, 04 Feb 2016 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20160204/</guid>
      <description>EJBのEntityManagerでテーブルをselectしてそのテーブルのエンティティを返すのは普通にやることだが、group byしてキーだけ取り出したい、などのときは以下のようにObjectの配列のリストとして扱う。
 val keys = em.createNativeQuery(&amp;quot;select t1.key1, t1.key2, t1.key3 &amp;quot; + &amp;quot;from T1 t1 &amp;quot; + &amp;quot;group by t1.key1, t1.key2, t1.key3 &amp;quot; + .getResultList().asInstanceOf[java.util.List[Array[Object] var result = List[fooPK]() keys.foreach(k =&amp;gt; result :+= new fooPK(k(0).toString, k(1).toString.toInt, k(2).toString.toInt))  </description>
    </item>
    
    <item>
      <title>pythonで正規表現を使った結果の判定</title>
      <link>https://ymraintree.github.io/blog/post/20151019/</link>
      <pubDate>Mon, 19 Oct 2015 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20151019/</guid>
      <description>pythonで文字列に数字が含まれているかどうかを判定したいとき、
import re def hantei(v): return re.search(\d, v)  とすると、re.search()がBooleanではなく、re.MatchObjectを返すので使えない。こういうときは、
 return re.search(\d, v) is not None  とするとすっきり。</description>
    </item>
    
    <item>
      <title>オブジェクトの値をコピーする</title>
      <link>https://ymraintree.github.io/blog/post/20150709/</link>
      <pubDate>Thu, 09 Jul 2015 09:00:00 +0900</pubDate>
      
      <guid>https://ymraintree.github.io/blog/post/20150709/</guid>
      <description>case class Foo(key:Int, key2:String, key3:Int)  のクラスからオブジェクトを生成し、それを他のオブジェクトにコピーしたいとき、scalaではcopyメソッドが使える。
val foo = Foo(100, &amp;quot;test&amp;quot;, 200) val zoo = foo.copy(key = 300)  とすると、keyは300がセットされ、他の値は元のオブジェクトからコピーされる。ただし、この機能はcaseクラスのみで、コピーされる対象は()内のプロパティのみ。
case class Foo(key:Int) { var v1:String =_ var v2:Int = _ }  だと、v1, v2はコピーされない。
となると、caseクラスのプロパティはすべて()内に書いちゃうほうがいいのかな。キーになる項目だけ（equalsで比較の対象となるべきものだけ）を定義するものだと思っていたんだけど。</description>
    </item>
    
  </channel>
</rss>